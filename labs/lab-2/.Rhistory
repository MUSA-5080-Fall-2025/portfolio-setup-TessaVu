# Align CRS.
pa_hospitals <- st_transform(pa_hospitals, crs = 4326)
pa_mapping <- st_transform(pa_mapping, crs = 4326)
# Choropleth map of PA counties.
choropleth_pa <- ggplot(pa_mapping) +
geom_sf(
# Color by underserved percentage.
aes(fill = percent_underserved),
color = "white",
linewidth = 0.25
) +
scale_fill_viridis_c(
# Color bar customization.
name = "Percent Underserved",
option = "viridis",
# Format to show percent sign in color bar.
labels = function(x) paste0(x, "%")
) +
geom_point(
data = pa_hospitals,
aes(x = LONGITUDE, y = LATITUDE, color = "Hospitals"),
alpha = 0.75, inherit.aes = FALSE
) +
scale_color_manual(
name = "Hospitals",
values = c("Hospitals" = "red")
) +
labs(
title = "UNDERSERVED COUNTIES & HOSPITAL LOCATIONS",
subtitle = "Pennsylvania, United States",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
) +
theme_void()
choropleth_pa + theme(
legend.box.margin = margin(l = 10, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono")
)
underserved_tracts
vulnerable_tracts
county_tracts
aggregate_summary
# Spatial join tracts to counties.
# Remove the " County" substring from the NAMELSADCO column values.
vulnerable_tracts <- vulnerable_tracts %>%
mutate(NAMELSADCO = str_remove_all(NAMELSADCO, " County"))
# Change the values in NAMELSADCO to all capitalized for later joining.
vulnerable_tracts$NAMELSADCO <- toupper(vulnerable_tracts$NAMELSADCO)
# Align CRS of both data before spatial join.
vulnerable_tracts <- st_transform(vulnerable_tracts, crs = 4326)
pa_counties <- st_transform(pa_counties, crs = 4326)
# Spatial left join.
county_tracts <- st_join(vulnerable_tracts, pa_counties, left = TRUE)
# Aggregate statistics by county
aggregate_summary <- county_tracts %>%
st_drop_geometry() %>% # Drop the geometry.
group_by(NAMELSADCO) %>% # Group by county.
summarize(
# Summarize the number of vulnerable and underserved people.
number_vulnerable = sum(vulnerable),
number_underserved = sum(underserved),
# Summarize the percent of underserved people.
percent_underserved = (number_underserved / number_vulnerable) * 100,
# Summarize the average distance to the nearest hospital.
avg_nearby_hospital_dist = mean(nearest_hospital_mi, na.rm = TRUE),
# Summarize the total estimated population.
total_vulnerable_pop = sum(total_popE)
) %>%
# Rename the NAMELSADCO column to county.
rename(
county = NAMELSADCO
)
# Change COUNTY_NAM to county.
pa_counties <- rename(pa_counties, county = COUNTY_NAM)
aggregate_summary
pa_mapping
View(pa_mapping)
aggregate_summary
# Create and format priority counties table.
kable_table <- pa_mapping[, c("county", "number_vulnerable",
"number_underserved", "percent_underserved",
"avg_nearby_hospital_dist", "total_vulnerable_pop")]
# Drop geometry and rename the columns.
kable_table <- kable_table %>%
st_drop_geometry() %>%
rename(
"County" = county,
"Number of Vulnerable Tracts" = number_vulnerable,
"Number of Underserved Tracts" = number_underserved,
"Percent Underserved" = percent_underserved,
"Average Mile(s) to Nearest Hospital" = avg_nearby_hospital_dist,
"Total Vulnerable People" = total_vulnerable_pop
)
# Filter and arrage the top 10 underserved counties by percent.
kable_table <- kable_table %>%
arrange(desc(`Percent Underserved`)) %>%
slice(1:10)
# Format percent column to have % sign.
kable_table <- kable_table %>%
mutate(
# Format so percent and distance values have units.
`Percent Underserved` = paste0(round(`Percent Underserved`, 2), "%"),
`Average Mile(s) to Nearest Hospital` = paste0(round(`Average Mile(s) to Nearest Hospital`, 2), " mi")
)
# Create kable.
kable(
kable_table,
# Center align.
align = "c",
# Limit percents to two decimal places.
digit = 2,
# Make sure numbers are separated by thousands places.
format.args = list(big.mark = ","),
caption = "<b>TOP 10 UNDERSERVED PA COUNTIES: For Priority Healthcare Investment</b>"
) %>%
# Shade every other row for ease of reading.
kable_styling(bootstrap_options = "striped") %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, color = "mistyrose", background = "red3")
# Create county-level access map.
# Align CRS.
pa_hospitals <- st_transform(pa_hospitals, crs = 4326)
pa_mapping <- st_transform(pa_mapping, crs = 4326)
# Choropleth map of PA counties.
choropleth_pa <- ggplot(pa_mapping) +
geom_sf(
# Color by underserved percentage.
aes(fill = percent_underserved),
color = "white",
linewidth = 0.25
) +
scale_fill_viridis_c(
# Color bar customization.
name = "Percent Underserved",
option = "viridis",
# Format to show percent sign in color bar.
labels = function(x) paste0(x, "%")
) +
geom_point(
data = pa_hospitals,
aes(x = LONGITUDE, y = LATITUDE, color = "Hospitals"),
alpha = 0.75, inherit.aes = FALSE
) +
scale_color_manual(
name = "Hospitals",
values = c("Hospitals" = "red")
) +
labs(
title = "UNDERSERVED COUNTIES & HOSPITAL LOCATIONS",
subtitle = "Pennsylvania, United States",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
) +
theme_void()
choropleth_pa + theme(
legend.box.margin = margin(l = 10, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono")
)
# Create detailed tract-level map.
# Align CRS.
vulnerable_tracts <- st_transform(vulnerable_tracts, crs = 4326)
pa_tracts <- st_transform(pa_tracts, crs = 4326)
# Filter by underserved tracts.
vulnerable_tracts <- vulnerable_tracts %>%
rename("Underserved Tracts" = underserved)
# Choropleth map of PA census tracts colored by vulnerable and underserved.
choropleth_map <- ggplot(vulnerable_tracts) +
geom_sf(
aes(fill = `Underserved Tracts`),
) +
geom_sf(
data = pa_tracts, fill = NA,
color = "midnightblue", linewidth = 0.25
) +
geom_sf(
data = pa_counties, fill = NA,
color = "midnightblue", linewidth = 0.5
) +
geom_point(
data = pa_hospitals,
aes(x = LONGITUDE, y = LATITUDE, color = "Hospitals"),
alpha = 0.75, inherit.aes = FALSE
) +
scale_fill_manual(
# Custom color bar.
name = "Tracts",
values = c("TRUE" = "gold2", "FALSE" = "lemonchiffon2"),
labels = c("TRUE" = "Underserved", "FALSE" = "Vulnerable"),
# Reorder so that underserved is placed above vulnerable in the legend.
breaks = c(TRUE, FALSE)
) +
scale_color_manual(
# Custom point addition to legend.
name = "Hospitals",
values = c("Hospitals" = "red2")
) +
labs(
title = "UNDERSERVED AND VULNERABLE CENSUS TRACTS",
subtitle = "With Hospital Locations in Pennsylvania, United States",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
) +
theme_void()
choropleth_map + theme(
panel.background = element_rect(fill = "azure3", size = 0.75),
legend.box.margin = margin(l = 10, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono")
)
# Create distribution visualization.
# Drop mile units to avoid object error in histogram.
vulnerable_tracts$nearest_hospital_mi <- drop_units(vulnerable_tracts$nearest_hospital_mi)
# Create distribution visualization.
# Make histogram of distance to nearest hospital.
histogram_hospital <- ggplot(vulnerable_tracts, aes(x = nearest_hospital_mi)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
labs(
title = "DISTANCE TO NEAREST HOSPITAL",
subtitle = "Histogram",
x = "Distance to Nearest Hospital (mi)",
y = "Count") +
theme_minimal() +
theme(aspect.ratio = 1/3) # Maintain aspect ratio.
# Make histogram of elderly population.
histogram_elderly <- ggplot(vulnerable_tracts, aes(x = age_65_overE)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
# Thousand separator.
scale_x_continuous(labels = comma) +
labs(
title = "VULNERABLE POPULATION OF AGES 65+",
subtitle = "Histogram",
x = "Population of Ages 65+",
y = "Count") +
theme_minimal() +
theme(aspect.ratio = 1/3) # Maintain aspect ratio.
# Make scatter plot of elderly population and natural log of hospital distance.
scatter_plot <- ggplot(vulnerable_tracts, aes(x = log(nearest_hospital_mi), y = age_65_overE)) +
geom_point(
# Make points less opaque to show visual density.
aes(alpha = 0.5)) +
geom_smooth(
# Add regression line.
method = lm, linetype = "dashed",
# Complementary colors for regression line and confidence shading.
color = "red2", fill = "palegreen3") +
# Thousand separator.
scale_y_continuous(labels = comma) +
labs(
title = "HOSPITAL DISTANCE AND VULNERABLE POPULATION",
subtitle = "ln(Distance to Nearest Hospital) vs. Population of Ages 65+",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
x = "Natural Log of Distance to Nearest Hospital",
y = "Population of Ages 65+") +
theme(aspect.ratio = 4/3) + # Maintain aspect ratio.
guides(alpha = "none") # Remove alpha in legend.
# Create faceted plot of all three charts above in one column and three rows.
faceted_plot <-
(histogram_hospital + theme(
# Customize margins and text.
plot.title = element_text(margin = margin(b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
# Customize margins and text.
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
# Customize margins and text.
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(margin = margin(t = 20, unit = "pt"), face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
#| message: false
#| warning: false
# Display faceted plot.
# Axis label units not needed because axes data are dimensionless or are counts.
faceted_plot
# Create distribution visualization.
# Make histogram of distance to nearest hospital.
histogram_hospital <- ggplot(vulnerable_tracts, aes(x = nearest_hospital_mi)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
labs(
title = "DISTANCE TO NEAREST HOSPITAL",
subtitle = "Histogram",
x = "Distance to Nearest Hospital (mi)",
y = "Count") +
theme_minimal() +
scale_x_continuous(labels = scales::label_number(suffix = " mi")) +
theme(aspect.ratio = 1/3) # Maintain aspect ratio.
# Make histogram of elderly population.
histogram_elderly <- ggplot(vulnerable_tracts, aes(x = age_65_overE)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
# Thousand separator.
scale_x_continuous(labels = comma) +
labs(
title = "VULNERABLE POPULATION OF AGES 65+",
subtitle = "Histogram",
x = "Population of Ages 65+",
y = "Count") +
theme_minimal() +
theme(aspect.ratio = 1/3) # Maintain aspect ratio.
# Make scatter plot of elderly population and natural log of hospital distance.
scatter_plot <- ggplot(vulnerable_tracts, aes(x = log(nearest_hospital_mi), y = age_65_overE)) +
geom_point(
# Make points less opaque to show visual density.
aes(alpha = 0.5)) +
geom_smooth(
# Add regression line.
method = lm, linetype = "dashed",
# Complementary colors for regression line and confidence shading.
color = "red2", fill = "palegreen3") +
# Thousand separator.
scale_y_continuous(labels = comma) +
labs(
title = "HOSPITAL DISTANCE AND VULNERABLE POPULATION",
subtitle = "ln(Distance to Nearest Hospital) vs. Population of Ages 65+",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
x = "Natural Log of Distance to Nearest Hospital",
y = "Population of Ages 65+") +
theme(aspect.ratio = 4/3) + # Maintain aspect ratio.
guides(alpha = "none") # Remove alpha in legend.
# Create faceted plot of all three charts above in one column and three rows.
faceted_plot <-
(histogram_hospital + theme(
# Customize margins and text.
plot.title = element_text(margin = margin(b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
# Customize margins and text.
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
# Customize margins and text.
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(margin = margin(t = 20, unit = "pt"), face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
#| message: false
#| warning: false
# Display faceted plot.
# Axis label units not needed because axes data are dimensionless or are counts.
faceted_plot
# Create distribution visualization.
# Make histogram of distance to nearest hospital.
histogram_hospital <- ggplot(vulnerable_tracts, aes(x = nearest_hospital_mi)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
labs(
title = "DISTANCE TO NEAREST HOSPITAL",
subtitle = "Histogram",
x = "Distance to Nearest Hospital (mi)",
y = "Count") +
theme_minimal() +
scale_x_continuous(labels = scales::label_number(suffix = " mi")) + # Format so tick numbers have miles at end.
theme(aspect.ratio = 1/3) # Maintain aspect ratio.
# Make histogram of elderly population.
histogram_elderly <- ggplot(vulnerable_tracts, aes(x = age_65_overE)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
# Thousand separator.
scale_x_continuous(labels = comma) +
labs(
title = "VULNERABLE POPULATION OF AGES 65+",
subtitle = "Histogram",
x = "Population of Ages 65+",
y = "Count") +
theme_minimal() +
theme(aspect.ratio = 1/3) # Maintain aspect ratio.
# Make scatter plot of elderly population and natural log of hospital distance.
scatter_plot <- ggplot(vulnerable_tracts, aes(x = nearest_hospital_mi, y = age_65_overE)) +
geom_point(
# Make points less opaque to show visual density.
aes(alpha = 0.5)) +
geom_smooth(
# Add regression line.
method = lm, linetype = "dashed",
# Complementary colors for regression line and confidence shading.
color = "red2", fill = "palegreen3") +
# Thousand separator.
scale_y_continuous(labels = comma) +
labs(
title = "HOSPITAL DISTANCE AND VULNERABLE POPULATION",
subtitle = "Distance to Nearest Hospital (mi) vs. Population of Ages 65+",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
x = "Distance to Nearest Hospital (mi)",
y = "Population of Ages 65+") +
scale_x_continuous(labels = scales::label_number(suffix = " mi")) + # Format so tick numbers have miles at end.
theme(aspect.ratio = 4/3) + # Maintain aspect ratio.
guides(alpha = "none") # Remove alpha in legend.
# Create faceted plot of all three charts above in one column and three rows.
faceted_plot <-
(histogram_hospital + theme(
# Customize margins and text.
plot.title = element_text(margin = margin(b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
# Customize margins and text.
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
# Customize margins and text.
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(margin = margin(t = 20, unit = "pt"), face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
#| message: false
#| warning: false
# Display faceted plot.
# Axis label units not needed because axes data are dimensionless or are counts.
faceted_plot
# Create distribution visualization.
# Make histogram of distance to nearest hospital.
histogram_hospital <- ggplot(vulnerable_tracts, aes(x = nearest_hospital_mi)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
labs(
title = "DISTANCE TO NEAREST HOSPITAL",
subtitle = "Histogram",
x = "Distance to Nearest Hospital (mi)",
y = "Count") +
theme_minimal() +
scale_x_continuous(labels = scales::label_number(suffix = " mi")) + # Format so tick numbers have miles at end.
theme(aspect.ratio = 1/3) # Maintain aspect ratio.
# Make histogram of elderly population.
histogram_elderly <- ggplot(vulnerable_tracts, aes(x = age_65_overE)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
# Thousand separator.
scale_x_continuous(labels = comma) +
labs(
title = "VULNERABLE POPULATION OF AGES 65+",
subtitle = "Histogram",
x = "Population of Ages 65+",
y = "Count") +
theme_minimal() +
theme(aspect.ratio = 1/3) # Maintain aspect ratio.
# Create faceted plot of all three charts above in one column and three rows.
faceted_plot <-
(histogram_hospital + theme(
# Customize margins and text.
plot.title = element_text(margin = margin(b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
# Customize margins and text.
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
))
#| message: false
#| warning: false
# Display faceted plot.
# Axis label units not needed because axes data are dimensionless or are counts.
faceted_plot
