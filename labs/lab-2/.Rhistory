axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
faceted_plot
faceted_plot <-
(histogram_hospital_log + theme(
plot.title = element_text(face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
plot.title = element_text(margin = margin(t = 20, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(margin = margin(b = 20, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
faceted_plot
faceted_plot <-
(histogram_hospital_log + theme(
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
faceted_plot
faceted_plot <-
(histogram_hospital_log + theme(
plot.title = element_text(margin = margin(b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(margin = margin(t = 20, unit = "pt"), face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
faceted_plot
histogram_elderly <- ggplot(vulnerable_tracts, aes(x = age_65_overE)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
labs(
title = "HISTOGRAM: VULNERABLE POPULATION OF AGES 65+",
x = "Population of Ages 65+",
y = "Count") +
theme_minimal() +
theme(aspect.ratio = 1/3)
faceted_plot <-
(histogram_hospital_log + theme(
plot.title = element_text(margin = margin(b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(margin = margin(t = 20, unit = "pt"), face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
faceted_plot
scatter_plot <- ggplot(vulnerable_tracts, aes(x = log(nearest_hospital_mi), y = age_65_overE)) +
geom_point(
aes(alpha = 0.5)) +
geom_smooth(
method = lm, linetype = "dashed",
color = "red2", fill = "palegreen3") +
labs(
title = "SCATTER PLOT: HOSPITAL DISTANCE AND VULNERABLE POPULATION",
subtitle = "Natural Log of Distance to Nearest Hospital vs. Population of Ages 65+\nwith Regression Line",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023\nThere's an upward regression line that seems to communicate and positive correlation between distance to the nearest hospital and the vulnerable population. However, a more in-depth statistical analysis will be needed to determine any significance, especially since the vast majority of points look like they are varied from the regression line.",
x = "Natural Log of Distance to Nearest Hospital",
y = "Population of Ages 65+") +
theme(aspect.ratio = 4/3) +
guides(alpha = "none")
scatter_plot
scatter_plot <- ggplot(vulnerable_tracts, aes(x = log(nearest_hospital_mi), y = age_65_overE)) +
geom_point(
aes(alpha = 0.5)) +
geom_smooth(
method = lm, linetype = "dashed",
color = "red2", fill = "palegreen3") +
labs(
title = "SCATTER PLOT: HOSPITAL DISTANCE AND VULNERABLE POPULATION",
subtitle = "Natural Log of Distance to Nearest Hospital vs. Population of Ages 65+\nwith Regression Line",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
x = "Natural Log of Distance to Nearest Hospital",
y = "Population of Ages 65+") +
theme(aspect.ratio = 4/3) +
guides(alpha = "none")
scatter_plot
scatter_plot <- ggplot(vulnerable_tracts, aes(x = log(nearest_hospital_mi), y = age_65_overE)) +
geom_point(
aes(alpha = 0.5)) +
geom_smooth(
method = lm, linetype = "dashed",
color = "red2", fill = "palegreen3") +
labs(
title = "SCATTER PLOT: HOSPITAL DISTANCE AND VULNERABLE POPULATION",
subtitle = "Natural Log of Distance to Nearest Hospital vs. Population of Ages 65+\nwith Regression Line",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
x = "Natural Log of Distance to Nearest Hospital",
y = "Population of Ages 65+") +
theme(aspect.ratio = 4/3) +
guides(alpha = "none")
faceted_plot <-
(histogram_hospital_log + theme(
plot.title = element_text(margin = margin(b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(margin = margin(t = 20, unit = "pt"), face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
faceted_plot
# Load required packages
library(kableExtra)
library(knitr)
library(patchwork)
library(scales)
library(sf)
library(tibble)
library(tidycensus)
library(tidyverse)
library(tigris)
library(units)
# Set Census API key
census_api_key("3aaee31789e10b674a531e9f236c35d5394b19ed")
# Load spatial data
pa_counties <- st_read("data/Pennsylvania_County_Boundaries.shp")
pa_tracts <- tracts(state = "PA", cb = TRUE)
pa_hospitals <- st_read("data/hospitals.geojson")
# Check that all data loaded correctly
glimpse(pa_counties)
glimpse(pa_tracts)
glimpse(pa_hospitals)
# Get demographic data from ACS
tract_ages <- get_acs(
geography = "tract",
variables = c(
"B01001_020E", "B01001_021E", "B01001_022E",
"B01001_023E", "B01001_024E", "B01001_025E",
"B01001_044E", "B01001_045E", "B01001_046E",
"B01001_047E", "B01001_048E", "B01001_049E"
),
state = "PA",
year = 2023,
output = "wide"
)
tract_demographics <- get_acs(
geography = "tract",
variables = c(
total_pop = "B01003_001",
median_income = "B19013_001"
),
state = "PA",
year = 2023,
output = "wide"
)
tract_demographics$age_65_overE <-
tract_ages$B01001_020E + tract_ages$B01001_021E + tract_ages$B01001_022E +
tract_ages$B01001_023E + tract_ages$B01001_024E + tract_ages$B01001_025E +
tract_ages$B01001_044E + tract_ages$B01001_045E + tract_ages$B01001_046E +
tract_ages$B01001_047E + tract_ages$B01001_048E + tract_ages$B01001_049E
tract_demographics$age_65_overM <-
tract_ages$B01001_020M + tract_ages$B01001_021M + tract_ages$B01001_022M +
tract_ages$B01001_023M + tract_ages$B01001_024M + tract_ages$B01001_025M +
tract_ages$B01001_044M + tract_ages$B01001_045M + tract_ages$B01001_046M +
tract_ages$B01001_047M + tract_ages$B01001_048M + tract_ages$B01001_049M
tract_demographics$TRACT <- NULL
tract_demographics <- rename(tract_demographics, TRACT = NAME)
# Join to tract boundaries
pa_tracts <- left_join(pa_tracts, tract_demographics, by = "GEOID")
summary(pa_tracts)
# Filter for vulnerable tracts based on your criteria
pa_tracts$pct_elderly <- (pa_tracts$age_65_overE / pa_tracts$total_popE) * 100
pa_tracts <- pa_tracts %>%
mutate(
low_income = case_when(median_incomeE <= 43700 ~ TRUE,
median_incomeE > 43700 ~ FALSE),
high_elderly = case_when(pct_elderly >= 23.51 ~ TRUE,
pct_elderly < 23.51 ~ FALSE),
vulnerable = case_when(low_income == TRUE | high_elderly == TRUE ~ TRUE,
low_income == FALSE & high_elderly == FALSE ~ FALSE)
)
vulnerable_summary <- pa_tracts %>%
group_by(vulnerable) %>%
summarize(
"Number of Tracts" = n(),
"Median Income" = median(median_incomeE, na.rm = TRUE),
"Percent Elderly" = median(pct_elderly, na.rm = TRUE),
"Percent Vulnerable" = (n() / 3445) * 100
)
vulnerable_summary
# Filter for vulnerable tracts based on your criteria
pa_tracts$pct_elderly <- (pa_tracts$age_65_overE / pa_tracts$total_popE) * 100
pa_tracts <- pa_tracts %>%
mutate(
low_income = case_when(median_incomeE <= 43700 ~ TRUE,
median_incomeE > 43700 ~ FALSE),
high_elderly = case_when(pct_elderly >= 23.51 ~ TRUE,
pct_elderly < 23.51 ~ FALSE),
vulnerable = case_when(low_income == TRUE | high_elderly == TRUE ~ TRUE,
low_income == FALSE & high_elderly == FALSE ~ FALSE)
)
vulnerable_summary <- pa_tracts %>%
group_by(vulnerable) %>%
summarize(
"Number of Tracts" = n(),
"Median Income" = median(median_incomeE, na.rm = TRUE),
"Percent Elderly" = median(pct_elderly, na.rm = TRUE),
"Percent Vulnerable" = (n() / 3445) * 100
)
vulnerable_summary
vulnerable_tracts <- pa_tracts %>%
filter(vulnerable == TRUE)
# Transform to appropriate projected CRS
vulnerable_tracts <- st_transform(vulnerable_tracts, crs = 5070)
pa_tracts <- st_transform(pa_tracts, crs = 5070)
pa_hospitals <- st_transform(pa_hospitals, crs = 5070)
# Calculate distance from each tract centroid to nearest hospital
vulnerable_centroids <- st_centroid(vulnerable_tracts)
nearest_hospital_index <- st_nearest_feature(vulnerable_centroids, pa_hospitals)
nearest_hospital_point <- pa_hospitals[nearest_hospital_index,]
hospital_distance <- st_distance(vulnerable_centroids, nearest_hospital_point, by_element = TRUE)
vulnerable_tracts$nearest_hospital_mi <- set_units(hospital_distance, "mi")
summary(vulnerable_tracts)
sum(vulnerable_tracts$nearest_hospital_mi > set_units(15, "mi"))
vulnerable_tracts <- pa_tracts %>%
filter(vulnerable == TRUE)
# Transform to appropriate projected CRS
vulnerable_tracts <- st_transform(vulnerable_tracts, crs = 5070)
pa_tracts <- st_transform(pa_tracts, crs = 5070)
pa_hospitals <- st_transform(pa_hospitals, crs = 5070)
# Calculate distance from each tract centroid to nearest hospital
vulnerable_centroids <- st_centroid(vulnerable_tracts)
nearest_hospital_index <- st_nearest_feature(vulnerable_centroids, pa_hospitals)
nearest_hospital_point <- pa_hospitals[nearest_hospital_index,]
hospital_distance <- st_distance(vulnerable_centroids, nearest_hospital_point, by_element = TRUE)
vulnerable_tracts$nearest_hospital_mi <- set_units(hospital_distance, "mi")
summary(vulnerable_tracts)
sum(vulnerable_tracts$nearest_hospital_mi > set_units(15, "mi"))
# Create underserved variable
underserved_tracts <- vulnerable_tracts %>%
filter(nearest_hospital_mi > set_units(15, "mi"))
vulnerable_tracts <- vulnerable_tracts %>% mutate(
underserved = case_when(
vulnerable_tracts$nearest_hospital_mi > set_units(15, "mi") ~ TRUE,
TRUE ~ FALSE))
(nrow(underserved_tracts) / nrow(vulnerable_tracts)) * 100
glimpse(underserved_tracts)
glimpse(vulnerable_tracts)
# Spatial join tracts to counties
vulnerable_tracts <- vulnerable_tracts %>%
mutate(NAMELSADCO = str_remove_all(NAMELSADCO, " County"))
vulnerable_tracts$NAMELSADCO <- toupper(vulnerable_tracts$NAMELSADCO)
vulnerable_tracts <- st_transform(vulnerable_tracts, crs = 4326)
pa_counties <- st_transform(pa_counties, crs = 4326)
county_tracts <- st_join(vulnerable_tracts, pa_counties, left = TRUE)
# Aggregate statistics by county
aggregate_summary <- county_tracts %>%
st_drop_geometry() %>%
group_by(NAMELSADCO) %>%
summarize(
number_vulnerable = sum(vulnerable),
number_underserved = sum(underserved),
percent_underserved = (number_underserved / number_vulnerable) * 100,
avg_nearby_hospital_dist = mean(nearest_hospital_mi),
total_vulnerable_pop = sum(total_popE)
) %>%
rename(
county = NAMELSADCO
)
pa_counties <- rename(pa_counties, county = COUNTY_NAM)
pa_mapping <- left_join(pa_counties, aggregate_summary, by = "county")
ggplot(pa_mapping) +
geom_sf(aes(fill = percent_underserved), color = "white", size = 0.5) +
scale_fill_viridis_c(
name = "Percent Underserved",
labels = comma,
option = "magma"
) +
labs(
title = "Most Underserved Counties",
subtitle = "Pennsylvania",
caption = "Source: ACS 2019–2023"
) +
theme_void()
# Create and format priority counties table
kable_table <- pa_mapping[, c("county", "number_vulnerable",
"number_underserved", "percent_underserved",
"avg_nearby_hospital_dist", "total_vulnerable_pop")]
kable_table <- kable_table %>%
mutate(
avg_nearby_hospital_dist = drop_units(avg_nearby_hospital_dist)
)
kable_table <- kable_table %>%
st_drop_geometry() %>%
rename(
"County" = county,
"Number of Vulnerable Tracts" = number_vulnerable,
"Number of Underserved Tracts" = number_underserved,
"Percent Underserved" = percent_underserved,
"Average Mile(s) to Nearest Hospital" = avg_nearby_hospital_dist,
"Total Vulnerable People" = total_vulnerable_pop
)
kable_table <- kable_table %>%
arrange(desc(`Percent Underserved`)) %>%
slice(1:10)
kable(
kable_table,
digit = 2,
format.args = list(big.mark = ","),
caption = "<b>TOP 10 UNDERSERVED PENNSYLVANIA COUNTIES: For Priority Healthcare Investment</b>"
) %>%
kable_styling(bootstrap_options = "striped") %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, color = "mistyrose", background = "red3")
# Create county-level access map
pa_hospitals <- st_transform(pa_hospitals, crs = 4326)
pa_mapping <- st_transform(pa_mapping, crs = 4326)
ggplot(pa_mapping) +
geom_sf(
aes(fill = percent_underserved),
color = "white",
size = 0.5
) +
scale_fill_viridis_c(
name = "Percent Underserved (%)",
labels = scales::comma,
option = "viridis"
) +
geom_point(
data = pa_hospitals,
aes(x = LONGITUDE, y = LATITUDE, color = "Hospitals"),
alpha = 0.75, inherit.aes = FALSE
) +
scale_color_manual(
name = "Hospitals",
values = c("Hospitals" = "red")
) +
labs(
title = "MOST UNDERSERVED COUNTIES & HOSPITAL LOCATIONS",
subtitle = "Pennsylvania, United States",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
) +
theme_void()
# Create detailed tract-level map
vulnerable_tracts <- st_transform(vulnerable_tracts, crs = 4326)
pa_tracts <- st_transform(pa_tracts, crs = 4326)
vulnerable_tracts <- vulnerable_tracts %>%
rename("Underserved Tracts" = underserved)
choropleth_map <- ggplot(vulnerable_tracts) +
geom_sf(
aes(fill = `Underserved Tracts`),
) +
geom_sf(
data = pa_tracts, fill = NA,
color = "midnightblue", linewidth = 0.35
) +
geom_point(
data = pa_hospitals,
aes(x = LONGITUDE, y = LATITUDE, color = "Hospitals"),
alpha = 0.75, inherit.aes = FALSE
) +
scale_fill_manual(
name = "Underserved Tracts",
values = c("TRUE" = "gold2", "FALSE" = "lemonchiffon2"),
labels = c("TRUE" = "Underserved", "FALSE" = "Vulnerable")
) +
scale_color_manual(
name = "Hospitals",
values = c("Hospitals" = "red2")
) +
labs(
title = "UNDERSERVED AND VULNERABLE CENSUS TRACTS",
subtitle = "With Hospital Locations in Pennsylvania, United States",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
) +
theme_void()
choropleth_map + theme(
panel.background = element_rect(fill = "azure3", size = 0.75),
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(margin = margin(b = 20, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono")
)
# Create distribution visualization
vulnerable_tracts$nearest_hospital_mi <- drop_units(vulnerable_tracts$nearest_hospital_mi)
histogram_hospital <- ggplot(vulnerable_tracts, aes(x = nearest_hospital_mi)) +
geom_histogram()
histogram_hospital_log <- ggplot(vulnerable_tracts, aes(x = log(nearest_hospital_mi))) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
labs(
title = "HISTOGRAM: NATURAL LOG OF DISTANCE TO NEAREST HOSPITAL",
x = "Natural Log of Distance to Nearest Hospital",
y = "Count") +
theme_minimal() +
theme(aspect.ratio = 1/3)
histogram_elderly <- ggplot(vulnerable_tracts, aes(x = age_65_overE)) +
geom_histogram(
color = "black",
fill = "mistyrose2"
) +
labs(
title = "HISTOGRAM: VULNERABLE POPULATION OF AGES 65+",
x = "Population of Ages 65+",
y = "Count") +
theme_minimal() +
theme(aspect.ratio = 1/3)
scatter_plot <- ggplot(vulnerable_tracts, aes(x = log(nearest_hospital_mi), y = age_65_overE)) +
geom_point(
aes(alpha = 0.5)) +
geom_smooth(
method = lm, linetype = "dashed",
color = "red2", fill = "palegreen3") +
labs(
title = "SCATTER PLOT: HOSPITAL DISTANCE AND VULNERABLE POPULATION",
subtitle = "Natural Log of Distance to Nearest Hospital vs. Population of Ages 65+\nwith Regression Line",
caption = "Source: 5-Year American Community Survey (ACS) 2019–2023",
x = "Natural Log of Distance to Nearest Hospital",
y = "Population of Ages 65+") +
theme(aspect.ratio = 4/3) +
guides(alpha = "none")
faceted_plot <-
(histogram_hospital_log + theme(
plot.title = element_text(margin = margin(b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(histogram_elderly + theme(
plot.title = element_text(margin = margin(t = 20, b = 10, unit = "pt"), face = "bold"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) /
(scatter_plot + theme(
legend.box.margin = margin(l = 20, unit = "pt"),
legend.title = element_text(face = "bold"),
legend.text = element_text(family = "mono"),
plot.title = element_text(margin = margin(t = 20, unit = "pt"), face = "bold"),
plot.subtitle = element_text(margin = margin(b = 10, t = 5, unit = "pt")),
plot.caption = element_text(margin = margin(t = 10, unit = "pt"), face = "italic", family = "mono"),
axis.title.x = element_text(margin = margin(t = 10, unit = "pt")),
axis.title.y = element_text(margin = margin(r = 10, unit = "pt"))
)) +
plot_layout(heights = c(1, 1, 2))
faceted_plot
