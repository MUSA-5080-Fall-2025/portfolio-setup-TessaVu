#| include: false
options(scipen = 999)
library(tidyverse)
library(tidycensus)
library(broom)
library(scales)
census_api_key("Your Key Here")
#| include: false
options(scipen = 999)
library(tidyverse)
library(tidycensus)
library(broom)
library(scales)
census_api_key("3aaee31789e10b674a531e9f236c35d5394b19ed")
#| eval: false
#| echo: true
challenge_data <- get_acs(
geography = "county",
state = "PA",
variables = c(
home_value = "B25077_001",      # YOUR TARGET
total_pop = "B01003_001",       # Total population
median_income = "B19013_001",   # Median household income
median_age = "B01002_001",      # Median age
percent_college = "B15003_022", # Bachelor's degree or higher
median_rent = "B25058_001",     # Median rent
poverty_rate = "B17001_002"     # Population in poverty
),
year = 2022,
output = "wide"
)
challenge_data
#| eval: false
#| echo: true
challenge_data <- get_acs(
geography = "county",
state = "PA",
variables = c(
home_value = "B25077_001",      # YOUR TARGET
total_pop = "B01003_001",       # Total population*
median_income = "B19013_001",   # Median household income
median_age = "B01002_001",      # Median age*
percent_college = "B15003_022", # Bachelor's degree or higher*
median_rent = "B25058_001",     # Median rent
poverty_rate = "B17001_002"     # Population in poverty*
),
year = 2022,
output = "wide"
)
regress_analysis <- lm(B25077_001 ~ B01003_001 + B01002_001 + B15003_022 + B17001_002, challenge_data)
#| eval: false
#| echo: true
challenge_data <- get_acs(
geography = "county",
state = "PA",
variables = c(
home_value = "B25077_001",      # YOUR TARGET
total_pop = "B01003_001",       # Total population*
median_income = "B19013_001",   # Median household income
median_age = "B01002_001",      # Median age*
percent_college = "B15003_022", # Bachelor's degree or higher*
median_rent = "B25058_001",     # Median rent
poverty_rate = "B17001_002"     # Population in poverty*
),
year = 2022,
output = "wide"
)
challenge_data
#regress_analysis <- lm(B25077_001 ~ B01003_001 + B01002_001 + B15003_022 + B17001_002, challenge_data)
#regress_analysis
#| eval: false
#| echo: true
challenge_data <- get_acs(
geography = "county",
state = "PA",
variables = c(
home_value = "B25077_001",      # YOUR TARGET
total_pop = "B01003_001",       # Total population*
median_income = "B19013_001",   # Median household income
median_age = "B01002_001",      # Median age*
percent_college = "B15003_022", # Bachelor's degree or higher*
median_rent = "B25058_001",     # Median rent
poverty_rate = "B17001_002"     # Population in poverty*
),
year = 2022,
output = "wide"
)
regress_analysis <- lm(home_value ~ total_pop + median_age + percent_college + poverty_rate, challenge_data)
#| eval: false
#| echo: true
challenge_data <- get_acs(
geography = "county",
state = "PA",
variables = c(
home_value = "B25077_001",      # YOUR TARGET
total_pop = "B01003_001",       # Total population*
median_income = "B19013_001",   # Median household income
median_age = "B01002_001",      # Median age*
percent_college = "B15003_022", # Bachelor's degree or higher*
median_rent = "B25058_001",     # Median rent
poverty_rate = "B17001_002"     # Population in poverty*
),
year = 2022,
output = "wide"
)
challenge_data
#regress_analysis <- lm(home_value ~ total_pop + median_age + percent_college + poverty_rate, challenge_data)
#regress_analysis
#| eval: false
#| echo: true
challenge_data <- get_acs(
geography = "county",
state = "PA",
variables = c(
home_value = "B25077_001",      # YOUR TARGET
total_pop = "B01003_001",       # Total population*
median_income = "B19013_001",   # Median household income
median_age = "B01002_001",      # Median age*
percent_college = "B15003_022", # Bachelor's degree or higher*
median_rent = "B25058_001",     # Median rent
poverty_rate = "B17001_002"     # Population in poverty*
),
year = 2022,
output = "wide"
)
regress_analysis <- lm(home_valueE ~ total_popE + median_ageE + percent_collegeE + poverty_rateE, challenge_data)
regress_analysis
#| eval: false
#| echo: true
challenge_data <- get_acs(
geography = "county",
state = "PA",
variables = c(
home_value = "B25077_001",      # YOUR TARGET
total_pop = "B01003_001",       # Total population*
median_income = "B19013_001",   # Median household income
median_age = "B01002_001",      # Median age*
percent_college = "B15003_022", # Bachelor's degree or higher*
median_rent = "B25058_001",     # Median rent
poverty_rate = "B17001_002"     # Population in poverty*
),
year = 2022,
output = "wide"
)
challenge_data
regress_analysis <- lm(home_valueE ~ total_popE + median_ageE + percent_collegeE + poverty_rateE, challenge_data)
regress_analysis
set.seed(123)
n <- nrow(pa_data)
set.seed(123)
n <- nrow(challenge_data)
# 70% training, 30% testing
train_indices <- sample(1:n, size = 0.7 * n)
train_data <- challenge_data[train_indices, ]
test_data <- challenge_data[-train_indices, ]
# Fit on training data only
model_train <- lm(median_incomeE ~ total_popE, data = train_data)
# Predict on test data
test_predictions <- predict(model_train, newdata = test_data)
rmse_test <- sqrt(mean((test_data$median_incomeE - test_predictions)^2))
rmse_train <- summary(model_train)$sigma
cat("Training RMSE:", round(rmse_train, 0), "\n")
cat("Test RMSE:", round(rmse_test, 0), "\n")
set.seed(123)
n <- nrow(challenge_data)
# 70% training, 30% testing
train_indices <- sample(1:n, size = 0.7 * n)
train_data <- challenge_data[train_indices, ]
test_data <- challenge_data[-train_indices, ]
# Fit on training data only
model_train <- regress_analysis
# Predict on test data
test_predictions <- predict(model_train, newdata = test_data)
rmse_test <- sqrt(mean((test_data$median_incomeE - test_predictions)^2))
rmse_train <- summary(model_train)$sigma
cat("Training RMSE:", round(rmse_train, 0), "\n")
cat("Test RMSE:", round(rmse_test, 0), "\n")
set.seed(123)
n <- nrow(challenge_data)
# 70% training, 30% testing
train_indices <- sample(1:n, size = 0.7 * n)
train_data <- challenge_data[train_indices, ]
test_data <- challenge_data[-train_indices, ]
# Fit on training data only
model_train <- regress_analysis
# Predict on test data
test_predictions <- predict(model_train, newdata = test_data)
# RMSE for training data
rmse_train <- sqrt(mean((train_data$home_valueE - train_predictions)^2))
regress_analysis <- lm(home_valueE ~ total_popE + median_ageE + percent_collegeE + poverty_rateE, challenge_data)
regress_analysis
set.seed(123)
n <- nrow(challenge_data)
# 70% training, 30% testing
train_indices <- sample(1:n, size = 0.7 * n)
train_data <- challenge_data[train_indices, ]
test_data <- challenge_data[-train_indices, ]
# Fit on training data only
model_train <- regress_analysis
# Predict on test data
test_predictions <- predict(model_train, newdata = test_data)
# Compute RMSE on the test data
rmse_test <- sqrt(mean((test_data$home_valueE - test_predictions)^2))
cat("Test RMSE:", round(rmse_test, 2), "\n")
# --- 1. Set random seed for reproducibility ---
set.seed(123)
# --- 2. Split into 70% training and 30% testing ---
n <- nrow(challenge_data)
train_indices <- sample(1:n, size = 0.7 * n)
train_data <- challenge_data[train_indices, ]
test_data  <- challenge_data[-train_indices, ]
# --- 3. Fit the regression model on training data ---
model_train <- lm(
home_valueE ~ total_popE + median_ageE + percent_collegeE + poverty_rateE,
data = train_data
)
# --- 4. Predict on both training and test data ---
train_predictions <- predict(model_train, newdata = train_data)
test_predictions  <- predict(model_train, newdata = test_data)
# --- 5. Compute RMSE for training and testing ---
rmse_train <- sqrt(mean((train_data$home_valueE - train_predictions)^2))
rmse_test  <- sqrt(mean((test_data$home_valueE - test_predictions)^2))
# --- 6. Display results ---
cat("Training RMSE:", round(rmse_train, 2), "\n")
cat("Test RMSE:", round(rmse_test, 2), "\n")
# --- 7. (Optional) Show summary of model fit ---
summary(model_train)
hist(total_popE)
hist(challenge_data$total_popE)
hist(challenge_data$median_ageE)
hist(challenge_data$percent_collegeE)
hist(challenge_data$poverty_rateE)
# Set random seed for reproducibility
set.seed(123)
# Split into 70% training and 30% testing
n <- nrow(challenge_data)
train_indices <- sample(1:n, size = 0.7 * n)
train_data <- challenge_data[train_indices, ]
test_data  <- challenge_data[-train_indices, ]
# Fit the regression model on training data
model_train <- lm(
home_valueE ~ log(total_popE) + median_ageE + log(percent_collegeE) + log(poverty_rateE),
data = train_data
)
# Predict on both training and test data
train_predictions <- predict(model_train, newdata = train_data)
test_predictions  <- predict(model_train, newdata = test_data)
# Compute RMSE for training and testing
rmse_train <- sqrt(mean((train_data$home_valueE - train_predictions)^2))
rmse_test  <- sqrt(mean((test_data$home_valueE - test_predictions)^2))
# Display results
cat("Training RMSE:", round(rmse_train, 2), "\n")
cat("Test RMSE:", round(rmse_test, 2), "\n")
# Show summary of model fit
summary(model_train)
hist(log(challenge_data$poverty_rateE))
hist(log(challenge_data$percent_collegeE))
hist(log(challenge_data$median_ageE))
hist(log(challenge_data$total_popE))
hist(challenge_data$total_popE)
hist(challenge_data$median_ageE)
hist(challenge_data$percent_collegeE)
hist(challenge_data$poverty_rateE)
hist(log(challenge_data$total_popE))
hist(log(challenge_data$median_ageE))
hist(log(challenge_data$percent_collegeE))
hist(log(challenge_data$poverty_rateE))
