{
  "hash": "435fb584fd062a4a5e35264899d6b65a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Philadelphia Housing Model—Technical Appendix\"\nsubtitle: \"Predicting Residential Property Prices\"\nauthor: \"Ming Cao, Mark Deng, Jun Luu, Josh Rigsby, Alex Stauffer, Tess Vu\"\nformat: \n  html:\n    code-fold: show\n    toc: true\n    toc-location: left\n    theme: lux\nexecute:\n  message: false\n  warning: false\n---\n\n# Data Cleaning\n\n## Primary Philadelphia Sales Data (OpenDataPhilly)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import relevant libraries.\nlibrary(car)\nlibrary(dplyr)\nlibrary(ggcorrplot)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(scales)\nlibrary(sf)\nlibrary(stringr)\nlibrary(tibble)\nlibrary(tidycensus)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(tmap)\nlibrary(units)\n\noptions(scipen = 999)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Property data.\nproperties_path <- \"data/philly_properties.csv\"\nproperties <- read.csv(properties_path)\n\n# Capture dimensions.\nog_property_dimension <- dim(properties)\n\n# Set Census API key.\ncensus_api_key(\"3aaee31789e10b674a531e9f236c35d5394b19ed\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# All variables are character strings, remove white space then convert numeric character variables to numeric classes for chosen variables.\n\nproperties <- properties %>%\n  mutate(across(where(is.character), str_trim),\n         across(c(fireplaces, garage_spaces, number_of_bathrooms, number_stories,\n                  sale_price, total_livable_area, year_built), as.numeric)) %>%\n  rename(fireplace_num = fireplaces,\n         garage_num = garage_spaces,\n         bath_num = number_of_bathrooms,\n         story_num = number_stories,\n         square_feet = total_livable_area,\n         basement_type = basements,\n         ac_binary = central_air,\n         fuel_type = fuel,\n         )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter to residential properties and 2023-2024 sales.\n# Note: Category code #1 is for residential.\nresidential_prop <- properties %>%\n  filter(.,\n         category_code == 1,\n         startsWith(sale_date, \"2023\") | startsWith(sale_date, \"2024\"))\n\n# Drop empty variables or variables not needed for model.\nresidential_prop <- residential_prop %>%\n  select(c(basement_type, ac_binary, fireplace_num, fuel_type, garage_num,\n           bath_num, story_num, sale_date, sale_price,\n           square_feet, year_built, shape)\n         )\n\n# Make empty character column values NA.\nresidential_prop <- residential_prop %>%\n  mutate(across(where(is.character), ~na_if(., \"\")))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop prices that are less than $10,000 as a catch-all (might not be as reflective for rural areas). Avoiding dropping prices based on percent of assessed value since property assessments can be biased against minoritized communities. Ideal drop would add deed type to drop any family or forced transfers.\nresidential_prop <- residential_prop %>%\n  filter(sale_price > 10000,\n         square_feet > 0) %>%\n  mutate(.,\n         price_per_sqft = sale_price / square_feet) %>%\n  filter(.,\n         price_per_sqft > quantile(price_per_sqft, 0.05, na.rm = TRUE))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create building age column, change central air to binary, and adjust basement and fuel types.\n# Create log value for the sale price.\nresidential_prop <- residential_prop %>%\n  mutate(ln_sale_price = log(sale_price),\n         age = 2025 - year_built,\n         ln_square_feet = log(square_feet),\n         ac_binary = case_when(\n           ac_binary == \"Y\" ~ 1,\n           ac_binary == \"N\" ~ 0),\n         basement_type = case_when(\n           basement_type == \"0\" ~ \"None\",\n           basement_type == \"A\" ~ \"Full Finished\",\n           basement_type == \"B\" ~ \"Full Semi-Finished\",\n           basement_type == \"C\" ~ \"Full Unfinished\",\n           basement_type == \"D\" ~ \"Full Unknown Finish\",\n           basement_type == \"E\" ~ \"Partial Finished\",\n           basement_type == \"F\" ~ \"Partial Semi-Finished\",\n           basement_type == \"G\" ~ \"Partial Unfinished\",\n           basement_type == \"H\" ~ \"Partial Unknown Finish\",\n           basement_type == \"I\" ~ \"Unknown Size Finished\",\n           basement_type == \"J\" ~ \"Unknown Size Unfinished\"),\n         fuel_type = case_when(\n           fuel_type == \"A\" ~ \"Natural Gas\",\n           fuel_type == \"B\" ~ \"Oil Heat\",\n           fuel_type == \"C\" ~ \"Electric\",\n           fuel_type == \"D\" ~ \"Coal\",\n           fuel_type == \"E\" ~ \"Solar\",\n           fuel_type == \"F\" ~ \"Wood\",\n           fuel_type == \"G\" ~ \"Other\",\n           fuel_type == \"H\" ~ \"None\")\n         )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Turn categorical data into factors so OLS regression doesn't handle the data as a list of strings.\nresidential_prop$basement_type <- as.factor(residential_prop$basement_type)\nresidential_prop$fuel_type <- as.factor(residential_prop$fuel_type)\n\n# Change the reference categories for baseline comparison.\nresidential_prop$basement_type <- relevel(residential_prop$basement_type, ref = \"None\")\nresidential_prop$fuel_type <- relevel(residential_prop$fuel_type, ref = \"Natural Gas\")\n\n# Place fuel type with 10 or less counts into other category.\nresidential_prop <- residential_prop %>%\n  mutate(fuel_type = fct_lump_min(fuel_type, min = 11, other_level = \"Other\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fixed effect temporal market fluctuations. Based on sale date, splitting the years into quarters (Q1, Q2, Q3, Q4). Potential fixed effect.\nresidential_prop <- residential_prop %>%\n  mutate(\n    quarters_fe = quarter(as_datetime(sale_date))\n    )\n\n# Make it a factor.\nresidential_prop$quarters_fe <- factor(residential_prop$quarters_fe)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Capture dimensions.\nafter_property_dimension <- dim(residential_prop)\n\n# Convert residential property to geodataframe. Use EPSG 2272 for South Pennsylvania in feet.\n# Drop shape when finished creating geometry.\nresidential_prop_gdf <- residential_prop %>%\n  mutate(geometry = st_as_sfc(shape)) %>%\n  st_as_sf(crs = 2272) %>%\n  rename(geometry_point = geometry) %>%\n  select(-c(shape))\n```\n:::\n\n\n# Spatial Data and Feature Engineering\n\n## Spatial Data (OpenDataPhilly)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in Philadelpha census tracts.\nphilly_tracts_path <- \"data/philly_tracts/philly_tracts.shp\"\nphilly_tracts <- st_read(philly_tracts_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `philly_tracts' from data source \n  `C:\\Users\\Tess\\Documents\\GitHub\\portfolio-setup-TessaVu\\midterm-project\\data\\philly_tracts\\philly_tracts.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3446 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -80.51985 ymin: 39.7198 xmax: -74.68956 ymax: 42.51607\nGeodetic CRS:  NAD83\n```\n\n\n:::\n\n```{.r .cell-code}\n# Match CRS.\nphilly_tracts <- st_transform(philly_tracts, crs = 2272)\n\n# Left spatial join.\nresidential_points <- st_join(residential_prop_gdf, philly_tracts)\n\n# Drop unnecessary columns and remove incomplete observations (rows) for upcoming spatial feature computations.\nresidential_points <- residential_points %>%\n  select(-c(FUNCSTAT, MTFCC, NAMELSAD, NAME,\n            STATEFP, COUNTYFP, TRACTCE)) %>%\n  na.omit(.)\n\n# Remove unneeded datasets for housekeeping and call garbage collector to reduce memory.\nrm(properties, residential_prop, residential_prop_gdf)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells  8660751 462.6   12561545  670.9  11778424  629.1\nVcells 73530435 561.0  138440631 1056.3 138440119 1056.3\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Proximity to downtown.\n\n# Decided on Euclidean distance because network proximity computation is demanding on thousands of points, even with parallel programming.\n\n# Create single Center City point feature based on City Hall coordinates.\ncenter_city <- st_sfc(st_point(c(-75.163500, 39.952800)), crs = 4326) %>%\n  st_transform(crs = 2272)\n\n# Need to add mile units for operations. Then remove units object for easier plotting.\nresidential_points$city_dist_mi <- (st_distance(residential_points, st_union(center_city))) %>%\n  set_units(\"mi\") %>%\n  drop_units() %>%\n  as.numeric()\n\n# Log transform because distance benefit diminishes, for potential use.\nresidential_points$ln_city_dist <- log(residential_points$city_dist_mi + 0.1)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transit proximity.\n# Major cities could be distance to nearest transit like metro/rail stations, but suburban and rural areas might be better served by distance to nearest major highway.\n# Read in SEPTA stops.\nsepta_stops_path <- \"data/septa_stops.csv\"\n\nsepta_stops_df <- read.csv(septa_stops_path)\n\n# Make csv a geodataframe.\nsepta_stops <- septa_stops_df %>%\n  st_as_sf(., coords = c(\"Lon\", \"Lat\"), crs = 4326)\n\n# Match CRS.\nsepta_stops <- septa_stops %>%\n  st_transform(., crs = 2272)\n\n# Stops are duplicated for the same station because the data includes directions for all cardinal directions as well as bus, rail, and trolley for the same location. This means a single station could have more than one point representing a single location residents go to commute.\n# Create new column with stop name without the cardinal suffixes and keep only the unique station values.\nsepta_stops <- septa_stops %>%\n  mutate(stations = if_else(\n    str_detect(StopAbbr, \"NO$|SO$|EA$|WE$|NE$|NW$|SE$|SW$\"),\n    str_sub(StopAbbr, end = -3),\n    str_sub(StopAbbr)\n    )\n  ) %>%\n  distinct(stations, .keep_all = TRUE)\n\n# Create buffer zone for stops within a half mile. This is ~10 minute walk, depending on topography.\n# Note: EPSG 2272 is measured in feet, not miles.\nsepta_distance <- st_buffer(residential_points, 2640)\n\n# Create number of stops in the buffer zone.\nsepta_stations <- st_intersects(septa_distance, septa_stops)\n\n# Append buffer zone counts and put into main tract data. Create a logged version for potential use as well because distance benefit tapers off.\nresidential_points <- residential_points %>%\n  mutate(\n    septa_half_mi = lengths(septa_stations),\n    ln_septa_half_mi = log(septa_half_mi + 0.1)\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Park proximity / size. Measuring distance is important for accessibility, but the size of the park often matters because a property near a block-sized pocket of green space is not equivalent to being near a large one like Wissahickon Valley Park.\n\n# Read in geojson data.\nparks_path <- \"data/parks.geojson\"\n\nparks <- st_read(parks_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `parks' from data source \n  `C:\\Users\\Tess\\Documents\\GitHub\\portfolio-setup-TessaVu\\midterm-project\\data\\parks.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 63 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -75.2837 ymin: 39.87048 xmax: -74.95865 ymax: 40.13191\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Match CRS and filter by parks.\nparks <- parks %>%\n  st_transform(., crs = 2272) %>%\n  filter(str_detect(USE_, \"PARK\"))\n\n# Get distance to the edge of the nearest park.\n# Note: Don't try to do spatial operations in apply() and mutate().\n# Distance matrix of residential properties to parks.\nparks_matrix <- st_distance(residential_points, parks)\n\n# Get the nearest distance for each point.\nresidential_points$parks_mile <- apply(parks_matrix, 1, min)\n\n# Convert to miles.\nresidential_points$parks_mile <- as.numeric(residential_points$parks_mile) / 5280\n\n# Log parks data for potential use because of diminishing distance benefits.\nresidential_points$ln_park_dist <- as.numeric(log(residential_points$parks_mile + 0.1))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convenience/Food points of interest. Using kNN to measure the density of these amenities rather than nearest amenity point.\namenities_path <- \"data/osm_pois/osm_pois.shp\"\namenities <- st_read(amenities_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `osm_pois' from data source \n  `C:\\Users\\Tess\\Documents\\GitHub\\portfolio-setup-TessaVu\\midterm-project\\data\\osm_pois\\osm_pois.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 65127 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -80.52111 ymin: 39.71816 xmax: -74.69473 ymax: 42.25797\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter amenities by convenience and food.\namenities <- amenities %>%\n  filter(fclass %in% c(\n    \"atm\", \"bakery\", \"bank\", \"bar\", \"beauty_shop\", \"biergarten\", \"bookshop\",\n    \"butcher\", \"cafe\", \"convenience\", \"department_store\", \"fast_food\", \"food_court\",\n    \"greengrocer\", \"hairdresser\", \"kiosk\", \"laundry\", \"market_place\", \"pharmacy\",\n    \"mall\", \"pub\", \"restaurant\", \"supermarket\"\n  )\n         ) %>%\n  st_transform(., crs = 2272)\n\n# Distance matrix of residential properties to amenities.\namenities_matrix <- st_distance(residential_points, amenities)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# k-Nearest Neighbors (kNN) function.\nknn_distance <- function(distance_matrix, k) {\n  apply(distance_matrix, 1, function(distances){\n    mean(as.numeric(sort(distances)[1:k]))\n  })\n}\n\n# Create kNN feature for amenities. k = 4 to balance for urban and suburban areas, probably not as representative of rural areas.\nresidential_points <- residential_points %>%\n  mutate(\n    knn_amenity_mi = as.numeric(knn_distance(amenities_matrix, k = 4))\n  )\n\n# Convert to miles.\nresidential_points$knn_amenity_mi <- as.numeric(residential_points$knn_amenity_mi / 5280)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fixed effect neighborhoods.\nneighborhoods_path <- \"data/philadelphia_neighborhoods/philadelphia_neighborhoods.shp\"\nphilly_neighborhoods <- st_read(neighborhoods_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `philadelphia_neighborhoods' from data source \n  `C:\\Users\\Tess\\Documents\\GitHub\\portfolio-setup-TessaVu\\midterm-project\\data\\philadelphia_neighborhoods\\philadelphia_neighborhoods.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 159 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -75.28026 ymin: 39.86701 xmax: -74.95576 ymax: 40.13799\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Match CRS.\nphilly_neighborhoods <- philly_neighborhoods %>%\n  st_transform(., crs = 2272)\n\n# Join to residential points and rename to neighborhoods.\nresidential_points <- residential_points %>%\n  st_join(., philly_neighborhoods) %>%\n  rename(neighborhood_fe = MAPNAME)\n\n# Make the neighborhoods a factor.\nresidential_points$neighborhood_fe <- relevel(factor(residential_points$neighborhood_fe), ref = \"East Falls\")\n\n# Place neighborhoods with 10 or less sales into a small neighborhoods category.\nresidential_points <- residential_points %>%\n  mutate(neighborhood_fe = fct_lump_min(neighborhood_fe, min = 11, other_level = \"Small Neighborhoods\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Capture spatial feature dimensions.\nafter_feat_eng_dimension <- dim(residential_points)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial feature creation table, select spatial features into a separate data frame and drop geometry.\nspatial_feature_df <- residential_points %>%\n  select(c(city_dist_mi, ln_city_dist, septa_half_mi, ln_septa_half_mi,\n           parks_mile, ln_park_dist, knn_amenity_mi)) %>%\n  na.omit(.) %>%\n  st_drop_geometry()\n\n# Create a tibble from the selected spatial features.\nspatial_summary <- tibble(\n  \"Spatial Features\" = names(spatial_feature_df),\n  \"Description\" = c(\"Distance from city (mi).\", \"Log of distance from city.\", \"Within 0.5mi of SEPTA station.\",\n                    \"Log of 0.5 SEPTA station.\", \"Distance from nearest park (mi).\",\n                    \"Log of distance from nearest park.\", \"k-Nearest Neighbors convenience and food amenities.\")\n)\n\n# Make Kable of spatial features.\nspatial_kable <- kable(spatial_summary,\n                       caption = \"Feature Engineered Variables\",\n                       format.args = list(big.mark = \",\")\n) %>%\n  kable_styling(latex_options = \"striped\",\n                full_width = FALSE) %>%\n  column_spec(1, bold = TRUE, width = \"5cm\") %>%\n  row_spec(0, color = \"#f5f4f0\", background = \"#ff4100\", bold = TRUE)\n\nspatial_kable\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Feature Engineered Variables</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Spatial Features </th>\n   <th style=\"text-align:left;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Description </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> city_dist_mi </td>\n   <td style=\"text-align:left;\"> Distance from city (mi). </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> ln_city_dist </td>\n   <td style=\"text-align:left;\"> Log of distance from city. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> septa_half_mi </td>\n   <td style=\"text-align:left;\"> Within 0.5mi of SEPTA station. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> ln_septa_half_mi </td>\n   <td style=\"text-align:left;\"> Log of 0.5 SEPTA station. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> parks_mile </td>\n   <td style=\"text-align:left;\"> Distance from nearest park (mi). </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> ln_park_dist </td>\n   <td style=\"text-align:left;\"> Log of distance from nearest park. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> knn_amenity_mi </td>\n   <td style=\"text-align:left;\"> k-Nearest Neighbors convenience and food amenities. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n**Primary:**\n\nFrom the CSV, we are analyzing the conditions of basements, number of fireplaces, garage spaces, number of bathrooms, number of stories, the total livable area in square feet, the existence of central air, and type of fuel used on the property. We filtered residential category code with the sale dates between 2023 and 2024. We eliminated property prices <10k. Rather than adhering to the percentage of assessed value as a guide for this filter, for it could incorporate marginalized bias, filtering the property prices removes non-market transactions but still incorporates a wide diversity of communities.\n\nThe forced the central air characteristic to become binary rather than “Y” and “N” and made sure to turn the categorical data to factors. The reference categories for types of basements is “None” and for fuel type, it’s “Natural Gas”. We including a building age category computed from the year built data. We logged the square footage and the sale price to correct for right-skewedness. \n\n**Spatial:**\n\nWe inserted the Philadelphia census tracts, changing the CRS to 2272, the ideal projection for SE Pennsylvania analysis. We decided to perform a log transformation on the following variables - city_dist (distance from City Hall in Center City), septa_half_mi (half mile buffer zone from all septa stops within the city geometry), and parks_dist (distance to edge of nearest park in miles) - because their effects on housing prices were non-linear. This transformation ensures that changes in proximity are measured more consistently across the range of distances, rather than being dominated by properties very close to these features.\n\nRegarding amenities, we used k-NN (k nearest neighbors) to measure the density of amenity accessibility rather than individual point data. The amenities are as follows: ATM, bakery, bank, bar, beauty shop, biergarten, bookshop, butcher, café, convenience, department store, fast food, food court, greengrocer, hairdresser, kiosk, laundry, marketplace, pharmacy, mall, pub, restaurant, supermarket.  We filtered by convenience and food, transformed the CRS to 2272 for consistency, and then developed a matrix. The distance was inverted, log-transformed to account for diminishing returns, and scaled it to produce a single numeric value in which higher, positive values indicate greater accessibility to amenities.\n\nWe included neighborhoods as fixed effects to help explain unknown, unquantifiable factors like cultural atmosphere and other neighborhood-specific factors we cannot statistically account for that may influence housing prices. It was converted into a factor so each neighborhood can receive its own baseline model. \nFiscal quarters were also introduced as fixed effects; splitting a year into 4 quarters for unknown factors when it comes to purchasing property (e.g. people are more likely to buy real estate in spring and summer).\n\n### Census Data (TidyCensus)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Open tidycensus data. Using 2023 data, because we are looking at sales 2023-2024\nacs_vars <- load_variables(2023, \"acs5\", cache = TRUE)\n\n# Get acs dimensions.\nog_acs_dimension <- dim(acs_vars)\n\n# The variables that we want from tidycensus\nvariables <- c(\n  median_household_income = \"B19013_001\",\n  total_pop = \"B01003_001\",\n  poverty_white = \"B17001A_001\", # To get poverty percentage\n  poverty_black = \"B17001B_001\",\n  poverty_native = \"B17001C_001\",\n  poverty_asian = \"B17001D_001\",\n  poverty_islander = \"B17001E_001\",\n  poverty_other = \"B17001F_001\",\n  poverty_multiracial = \"B17001G_001\",\n  male_18_24_bach = \"B15001_009\", # Tracts only show bachelor's degrees, unless we want to look at only people 25+\n  male_25_34_bach = \"B15001_017\",\n  male_35_44_bach = \"B15001_025\",\n  male_45_64_bach = \"B15001_033\",\n  male_65plus_bach = \"B15001_041\",\n  female_18_24_bach = \"B15001_050\",\n  female_25_34_bach = \"B15001_058\",\n  female_35_44_bach = \"B15001_066\",\n  female_45_64_bach = \"B15001_074\",\n  female_65plus_bach = \"B15001_082\",\n  total_vacant = \"B25005_001\", # To get vacancy percentage\n  white_total_units = \"B25032A_001\", # Need total units to get percentage of single, detached units and vacant units.\n  white_single_family = \"B25032A_002\",\n  black_total_units = \"B25032B_001\",\n  black_single_family = \"B25032B_002\",\n  native_total_units = \"B25032C_001\",\n  native_single_family = \"B25032C_002\",\n  asian_total_units = \"B25032D_001\",\n  asian_single_family = \"B25032D_002\",\n  islander_total_units = \"B25032E_001\",\n  islander_single_family = \"B25032E_002\",\n  other_total_units = \"B25032F_001\",\n  other_single_family = \"B25032F_002\",\n  multiracial_total_units = \"B25032G_001\",\n  multiracial_single_family = \"B25032G_002\",\n  medhhinc_white = \"B19013A_001\", # Median Household Income\n  medhhinc_black = \"B19013B_001\",\n  medhhinc_native = \"B19013C_001\", \n  medhhinc_asian = \"B19013D_001\", \n  medhhinc_other = \"B19013F_001\",  # There is no tract data for native hawiian/pacific islander, I'm including it with other\n  medhhinc_multiracial = \"B19013G_001\", \n  white_pop = \"B01001A_001\",\n  black_pop = \"B01001B_001\",\n  native_pop = \"B01001C_001\",\n  asian_pop = \"B01001D_001\",\n  islander_pop = \"B01001E_001\",\n  other_pop = \"B01001F_001\",\n  multiracial_pop = \"B01001G_001\"\n)\n\n# We are grouping our data by tracts\nphilly_tract_acs <- get_acs(\n  geography = \"tract\",\n  state = \"PA\",\n  variables = variables,\n  year = 2022,\n  survey = \"acs5\",\n  cache_table = TRUE, \n  output = \"wide\"\n)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summing up the variables that we need to create our percentage variables\nphilly_tract_acs <- philly_tract_acs %>%\n  mutate(\n    total_poverty = poverty_whiteE + poverty_blackE + poverty_nativeE + poverty_asianE + poverty_islanderE + poverty_otherE + poverty_multiracialE, # Adding all poverty populations together \n    \n    total_bach = male_18_24_bachE + male_25_34_bachE + male_35_44_bachE + male_45_64_bachE + male_65plus_bachE + female_18_24_bachE + female_25_34_bachE + female_35_44_bachE + female_45_64_bachE + female_65plus_bachE, #Adding all bachelors degrees together\n    \n    total_units = white_total_unitsE + black_total_unitsE + native_total_unitsE + asian_total_unitsE + islander_total_unitsE + other_total_unitsE + multiracial_total_unitsE, # Total housing units\n    \n    total_single_family = white_single_familyE + black_single_familyE + native_single_familyE + asian_single_familyE + islander_single_familyE + other_single_familyE + multiracial_single_familyE # Total single family homes\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating our variables that we are going to analyze\nphilly_tract_acs <- philly_tract_acs %>%\n  mutate(\n    pct_poverty = (total_poverty/total_popE)*100, # Divide total poverty population by total population\n\n    pct_bach = (total_bach/total_popE)*100, # Divide bachelor degree holders by total population\n    \n    pct_vacant = (total_vacantE/total_units)*100, # Divide vacant units by total housing units\n    pct_vacant = ifelse(is.infinite(pct_vacant) | total_vacantE > total_units, 100, pct_vacant), # Fixing errors when units equal zero or high MOE\n    \n    pct_single_family = (total_single_family/total_units)*100, # Divide single family homes by total housing units\n    \n    medhhinc = \n  (ifelse(is.na(medhhinc_whiteE), 0, medhhinc_whiteE) * white_popE +\n   ifelse(is.na(medhhinc_blackE), 0, medhhinc_blackE) * black_popE +\n   ifelse(is.na(medhhinc_nativeE), 0, medhhinc_nativeE) * native_popE +\n   ifelse(is.na(medhhinc_asianE), 0, medhhinc_asianE) * asian_popE +\n   ifelse(is.na(medhhinc_otherE), 0, medhhinc_otherE) * (islander_popE + other_popE) +\n   ifelse(is.na(medhhinc_multiracialE), 0, medhhinc_multiracialE) * multiracial_popE) / total_popE)\n# For median household income, I had to turn all median household incomes that were NA to 0, so that it would not mess up the formula. \n# Multiplying median household income times population by race. There was no islander median household income, so I included it in other. All divided by the total population, to get the total median household income. \n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a summary table \nphilly_acs_summary <- philly_tract_acs %>%\n  select(\n    GEOID, \n    NAME,\n    pct_poverty,\n    pct_bach,\n    pct_vacant,\n    pct_single_family,\n    medhhinc\n  )\n\n# Get after acs dimension.\nafter_acs_dimension <- dim(philly_acs_summary)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join primary and census data.\nfinal_data <- residential_points %>%\n  left_join(philly_acs_summary, by = \"GEOID\") %>%\n  select(-c(sale_date, year_built, ALAND, AWATER,\n            INTPTLAT, INTPTLON, NAME.x, LISTNAME, NAME.y,\n            Shape_Leng, Shape_Area)\n         )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create key variables list.\nkey_columns <- c(\"sale_price\", \"ln_sale_price\", \"square_feet\", \"ln_square_feet\",\n                 \"bath_num\", \"fireplace_num\", \"garage_num\", \"ac_binary\",\n                 \"story_num\", \"age\", \"city_dist_mi\", \"ln_city_dist\",\n                 \"septa_half_mi\", \"ln_septa_half_mi\", \"parks_mile\", \"ln_park_dist\",\n                 \"knn_amenity_mi\", \"pct_poverty\", \"pct_bach\",\n                 \"pct_vacant\", \"pct_single_family\", \"medhhinc\",\n                 \"basement_type\", \"fuel_type\", \"neighborhood_fe\", \"quarters_fe\")\n\n# Reorder for key columns first and drop all rows with NA because OLS needs complete observations.\nfinal_data <- final_data %>%\n  select(any_of(key_columns), everything()) %>%\n  na.omit(.)\n\n# Get final dimension.\nfinal_dimension <- dim(final_data)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Separate before/after dimensions for data.\ndimensions <- data.frame(\n  rows_columns = c(\"Rows\", \"Columns\"),\n  \"Property Data Before\" = og_property_dimension,\n  \"Property Data After\" = after_property_dimension,\n  \"Property Data After Feature Engineering\" = after_feat_eng_dimension,\n  \"ACS Data Before\" = og_acs_dimension,\n  \"ACS Data After\" = after_acs_dimension,\n  \"Final Data\" = final_dimension\n)\n\n# Make Kable of dimensions.\ndimensions_kable <- kable(dimensions,\n                          col.names = c(\"Dimensions\", \"Property Data Before\", \"Property Data After\",\n                                        \"Property Data After Feature Engineering\",\n                                        \"ACS Data Before\", \"ACS Data After\", \"Final Data\"),\n                          digits = 2,\n                          caption = \"Before and After Data Dimensions\",\n                          format.args = list(big.mark = \",\")\n) %>%\n  kable_styling(latex_options = \"striped\",\n                full_width = FALSE) %>%\n  column_spec(1, bold = TRUE) %>%\n  row_spec(0, color = \"#f5f4f0\", background = \"#ff4100\", bold = TRUE)\n\ndimensions_kable\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Before and After Data Dimensions</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Dimensions </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Property Data Before </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Property Data After </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Property Data After Feature Engineering </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> ACS Data Before </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> ACS Data After </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Final Data </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Rows </td>\n   <td style=\"text-align:right;\"> 559,322 </td>\n   <td style=\"text-align:right;\"> 25,026 </td>\n   <td style=\"text-align:right;\"> 13,743 </td>\n   <td style=\"text-align:right;\"> 28,261 </td>\n   <td style=\"text-align:right;\"> 3,446 </td>\n   <td style=\"text-align:right;\"> 13,742 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Columns </td>\n   <td style=\"text-align:right;\"> 79 </td>\n   <td style=\"text-align:right;\"> 17 </td>\n   <td style=\"text-align:right;\"> 34 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;\"> 29 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n**Census:**\n\nUsing tidycensus, we imported all variables that aligned with our structural data from 2023 ACS data by tracts: median household income, total population, poverty by ethnicity (White, Black, Native American, Asian, Pacific Islander, “Other,” Multiracial), males and females aged 18–65+ with bachelor’s degrees or higher, total vacancy, and total housing units by ethnicity, as well as single-family households and median household income per ethnic group. We compiled the individual poverty, bachelor’s degree, unit, and single-family household counts by ethnicity to form the following percentage variables: total_poverty, total_bach, total_units, and total_single_family.\n\nFrom this, we calculated pct_poverty, pct_bach, pct_vacant (accounting for ACS errors), pct_single_family, and medhhinc, transforming NAs to 0 for regression analysis.\n\nUsing our residential property vector data (which includes structural, spatial, and feature-engineered variables), we performed a left join on the cleaned ACS summary data by GEOID.\n\nAfter organizing the final dataset so key variables appear first, we generated a kable summarizing the workflow. The final dataset contains 26,344 observations and 29 columns.\n\n# Exploratory Data Analysis (EDA)\n\n### Visualizations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distribution of Sale Prices Histogram\n\nsale_price_hist <- ggplot(final_data, aes(x = sale_price)) +\n  geom_histogram(fill = \"#6BAED6\", color = \"white\", bins = 25) +\n  labs(title = \"Distribution of Sale Prices\",\n       x = \"Sale Price ($)\",\n       y = \"Count\") +\n  scale_x_continuous(labels = scales::dollar) +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nsale_price_hist\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n**Distribution of Sales Prices - Histogram**\n\nThe distribution of sales prices is heavily skewed right, with a high percentage of thee transactions below $500,000, and a relatively small number of homes falling in the multi-million dollar range. This chart also also gives insight into the potential presence of high leverage outliers falling toward the left. A concentration of thousands of sales clustered on the lower end of the price ranges suggests strong segmentation, meaning that the market is split into distinct groups, where you see a large cluster of homes that are relatively similar and a smaller but very different cluster of high-value properties with luxury features and few homes in-between, the market looks like separate groups  rather than one gradually increasing scale. It’s important to note that this spread likely indicates heteroskedasticity, and would require a log transformation for statistical inference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Geographic distribution map - Sale Price\n\ntmap_mode(\"plot\")\n\nsale_price_map <- tm_shape(philly_neighborhoods) +\n  tm_polygons(col = \"gray95\", border.col = \"gray65\") +\n  tm_shape(final_data) +\n  tm_dots(col = \"sale_price\",\n          palette = \"YlOrRd\",\n          size = 0.05,\n          style = \"quantile\",\n          col.title = \"Sale Price ($)\") +\n  tm_layout(main.title = \"Geographic Distribution of Sale Prices\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            frame = FALSE,\n            bg.color = \"#f5f4f0\")\n\nsale_price_map\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-27-1.png){width=960}\n:::\n\n```{.r .cell-code}\n#tmap_save(tm = sale_price_map, filename = \"slide_images/geo-price-map.png\", width = 10, height = 6, units = \"in\", dpi = 300, bg = \"transparent\")\n```\n:::\n\n\n**Geographic Distribution of Sales Prices - Map**\n\nThis map displays a high variation of sales prices distributed throughout the city. The higher priced clustered areas are the Center City, University City, the riverfront, and affluent pockets of the Northwest, potentially because these areas provide easy access to transit, employment centers, and cultural amenities. The northern area stretching above Broad Street into parts of West and North Philadelphia displays lower-priced homes, potentially reflecting long-term disinvestment, high vacancy rates, and aging non-renovated housing stock. The spatial clustering suggests that sale price is place-dependent in Philadelphia, mostly due to neighborhood qualities, and fixed effects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale Price vs structural features scatter plot\n\n# Sale Price vs. Square feet \nprice_v_sqft_plot <- ggplot(final_data, aes(x = square_feet, y = sale_price)) +\n  geom_point(alpha = 0.4, color = \"#08519C\", size = 1.3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linewidth = 1) +\n  labs(title = \"Sale Price vs. Square Feet\",\n       x = \"Square Feet\",\n       y = \"Sale Price ($)\") +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.background = element_rect(fill = \"#f5f4f0\"),\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nprice_v_sqft_plot\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-28-1.png){width=576}\n:::\n\n```{.r .cell-code}\n#ggsave(\"slide_images/price-v-sqft.png\", plot = price_v_sqft_plot, width = 6, height = 4, units = \"in\", dpi = 300)\n```\n:::\n\n\n**Sale Price vs. Square Feet**\n\nThis scatter plot highlights the importance of home size as a structural indicator of value, even though the relationship may not be linear. There is a dense concentration of homes clustered below 3,000 sq ft. and under $500,000 consistent with the sales price distribution. Here we are seeing the same strong skew to the right, displaying a relationship between the two variables. The upward trend is fairly obvious, larger homes = an increase in price, however the spread gets wider as square footage increases, indicating that while square footage is positively associated with price, the weaker relationship among larger properties suggests that additional living space contributes less to value once the home reaches a certain size category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale Price vs. Number of Fireplaces \n\nprice_v_fire_plot <- ggplot(final_data, aes(x = fireplace_num, y = sale_price)) +\n  geom_jitter(alpha = 0.5, color = \"#08519C\", size = 1.3, width = 0.15, height = 0) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linewidth = 1) +\n  labs(title = \"Sale Price vs. Number of Fireplaces\",\n       x = \"Number of Fireplaces\",\n       y = \"Sale Price ($)\") +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.background = element_rect(fill = \"#f5f4f0\"),\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nprice_v_fire_plot\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-29-1.png){width=576}\n:::\n\n```{.r .cell-code}\n#ggsave(\"slide_images/price-v-fire.png\", plot = price_v_fire_plot, width = 6, height = 4, units = \"in\", dpi = 300)\n```\n:::\n\n\n**Sale Price vs. Number of Fireplaces**\n\nThis chart displays the positive relationship between the value of a home in relation to the quality and character of aesthetic features. Nearly all homes with no fireplaces remain in the lower-mid price range, and once a home has two or more fire places the sale price increases to a much higher range. Homes in Philadelphia with several fireplaces are usually bigger, older, homes with higher-end finishes, meaning that fireplace count can serve as a secondary and indirect indicator of several other indicators that influence home value, and this is the reason for the high level of noise on the chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale Price vs. Spatial Features\n\n# Sale Price vs Distance to city center\nprice_v_spatial_plot <- ggplot(final_data, aes(x = city_dist_mi, y = sale_price)) +\n  geom_point(alpha = 0.4, color = \"#41AB5D\", size = 1.3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linewidth = 1) +\n  labs(title = \"Sale Price vs. Distance to Downtown\",\n       x = \"ln Distance to City Center, mi\",\n       y = \"Sale Price\") +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nprice_v_spatial_plot\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n**Sale Price vs. Distance to City Center**\n\nThe plots shows a weak negative relationship between price and distance to the city center. High valued homes fall both close to downtown and well outside of it, highlighting the structure of Philadelphia’s housing market as it relates to location. It’s not a city where closer is always better, instead certain neighborhoods like chestnut hill maintain their high premiums due to neighborhood reputation, and school quality. This pattern suggests that there are many fixed affects at play here, and it is important to note that similar patterns were displayed among many spatial variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale Price vs. Distance to Parks - Park Accessibility\n\nprice_v_park_plot <- ggplot(final_data, aes(x = parks_mile, y = sale_price)) +\n  geom_point(alpha = 0.4, color = \"#238B45\", size = 1.3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linewidth = 1) +\n  labs(title = \"Sale Price vs. Distance to Nearest Park\",\n       x = \"Distance to Nearest Park (mi)\",\n       y = \"Sale Price\") +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nprice_v_park_plot\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n**Sale Price vs. Distance to Parks - Park Accessibility**\n\nThe plot suggests that distance to parks has very little trend with sale price. Many high-priced properties sit both very close and very far away from parks, suggesting that park accessibility alone may not hold much value. This could be correlated with the fact that some parks are major attractions; i.e Fairmount Park, while others have limited impact on neighborhood desirability, especially in areas of low investment. Because of the difference in park quality across the city, the distance metric may not represents the true relationship, and more neighborhood or amenity variables may be required to capture environmental quality more accurately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Median income vs Sale Price per neighborhood\n\ninc_v_price_plot <- ggplot(final_data, aes(x = medhhinc, y = sale_price, color = neighborhood_fe)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +\n  labs(title = \"Relationship Between Median Income and Sale Price by Neighborhood\",\n       x = \"Median Household Income ($)\",\n       y = \"Sale Price\") +\n  scale_x_continuous(labels = scales::dollar) +\n  scale_y_continuous(labels = scales::dollar) +\n  scale_color_viridis_d(option = \"turbo\") +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 7),\n    legend.key.size = unit(0.4, \"cm\"),\n    legend.box = \"horizontal\"\n    ) +\n  guides(color = guide_legend(ncol = 8, byrow = TRUE))\n\ninc_v_price_plot\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-32-1.png){width=1440}\n:::\n:::\n\n\n**Median Income vs Sale Price per neighborhood**\n\nThis plot further advances the claim that even with a lot of scatter in the points, there is a noticeable upward trend of homes in higher-income neighborhoods selling for higher prices. Many of the neighborhoods cluster in specific ranges of the price scale, even when income levels are similar, suggesting that the  housing market in Philadelphia is dependent not only on demographics or income, but place effects, where reputation or fixed effects in a neighborhood increase or reduce prices. An example of this is some neighborhoods with moderate household incomes still show clusters of high-value transactions, while others with similar incomes remain in the lower end of the market, again highlighting other factors and fixed effects like transit access, historical character, and school quality. The main takeaway is that while higher-income neighborhood tend to have homes with higher sale prices, neighborhood identity also plays a big role in sale price.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial Relationship Between sale price and structural predictors\n\ntmap_mode(\"plot\")\n\n# Sale Price\nmap_value <- tm_shape(philly_tracts[philly_tracts$COUNTYFP == 101, ]) +\n  tm_polygons(col = \"gray90\", border.col = \"gray45\", lwd = 0.5) +\n  tm_shape(final_data) +\n  tm_dots(col = \"sale_price\",\n          palette = \"YlOrRd\",\n          style = \"quantile\",\n          size = 0.04,\n          title = \"Sale Price\") +\n  tm_layout(main.title = \"Distribution of Sale Prices\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            frame = FALSE)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bathrooms Predictor\n\nmap_bath <-  tm_shape(philly_tracts[philly_tracts$COUNTYFP == 101, ]) +\n  tm_polygons(col = \"gray90\", border.col = \"gray45\", lwd = 0.5) +\n  tm_shape(final_data) +\n  tm_dots(col = \"bath_num\",\n          palette = \"Blues\",\n          style = \"quantile\",\n          size = 0.04,\n          title = \"Number of Bathrooms\") +\n  tm_layout(main.title = \"Distribution of Bathrooms\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            frame = FALSE)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Stories Predictor\n\nmap_story <-  tm_shape(philly_tracts[philly_tracts$COUNTYFP == 101, ]) +\n  tm_polygons(col = \"gray90\", border.col = \"gray45\", lwd = 0.5) +\n  tm_shape(final_data) +\n  tm_dots(col = \"story_num\",\n          palette = \"Greens\",\n          style = \"quantile\",\n          size = 0.04,\n          title = \"Number of Stories\") +\n  tm_layout(main.title = \"Distribution of Stories\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            frame = FALSE)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display them side by side\n\ntmap_arrange(map_value, map_bath, map_story, ncol = 3)\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-36-1.png){width=960}\n:::\n\n```{.r .cell-code}\nmap_struct <- tmap_arrange(map_value, map_bath, map_story, ncol = 3)\n```\n:::\n\n\n**Spatial Relationship Between sale price and structural predictors (bathrooms and stories) - Map**\n\nThis figure shows how housing characteristics are clustered across Philadelphia. Here we can see the sale price distribution directly against certain structural features. Bathrooms and number of stories follow similar geographic patterns, as sale price, areas with higher sales prices tend to have bigger homes with more bathrooms and more stories. In contrast, neighborhoods where homes have less structural amenities also have subsequently lower sale prices. This group of maps makes a strong visual argument that structural features and neighborhood context evolve together, supporting the modeling strategy of incorporating more structural than spatial predictors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale price histogram.\nprice_hist <- ggplot(residential_points, aes(x = sale_price)) +\n  geom_histogram(fill = \"pink\", color = \"white\") +\n  labs(title = \"Histogram of Sale Price\", x = \"Sale Price ($)\", y = \"Count\") +\n  theme_minimal()\n\n# Log sale price histogram.\nln_price_hist <- ggplot(residential_points, aes(x = ln_sale_price)) +\n  geom_histogram(fill = \"pink\", color = \"white\") +\n  labs(title = \"Histogram of ln(Sale Price)\", x = \"ln(Sale Price)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(price_hist, ln_price_hist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nThe raw distribution of sale prices is right-skewed with a median of 250,000 USD and a mean of 343,867 USD. There is a substantial gap in price between the third quartile (375,000 USD) and the maximum price (15,428,633 USD). While 75% of houses sold for 375,000 USD or less, the upper 25% exhibits considerable variability, with prices ranging up to 15.4 million USD, affecting the tail distribution. This suggests that a small number of luxury properties are affecting the distribution of the sales price data To address this skewness and improve model performance, we performed a log transformation, making our data closer to normal by compressing the scale of higher values, emphasizing a standardized change in percentage over dollar amount.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Livable space histogram.\nlivable_area_hist <- ggplot(residential_points, aes(x = square_feet)) +\n  geom_histogram(fill = \"wheat\", color = \"white\") +\n  labs(title = \"Histogram of Square Feet\", x = \"Square Feet\", y = \"Count\") +\n  theme_minimal()\n\n# Log livable space histogram.\nln_square_feet_hist <- ggplot(residential_points, aes(x = ln_square_feet)) +\n  geom_histogram(fill = \"wheat\", color = \"white\") +\n  labs(title = \"Histogram of ln(Square Feet)\", x = \"ln(Square Feet)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(livable_area_hist, ln_square_feet_hist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nThe distribution of livable area is right-skewed, with a median of 1,216 sq ft and a mean of 1,372 sq ft. While 75% of homes are under 1,509 sq ft, a small number of larger properties extend the upper tail of the distribution. Notably, homes above 3,000 sq ft become increasingly sparse, suggesting a separation between standard and luxury housing markets. We applied a log transformation to this variable to create a more symmetric distribution by compressing the scale of larger homes, which improves linearity in our model and allows coefficients to represent proportional rather than absolute changes in square footage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distance to downtown histogram.\ndowntown_dist_hist <- ggplot(residential_points, aes(x = city_dist_mi)) +\n  geom_histogram(fill = \"darkblue\", color = \"white\") +\n  labs(title = \"Histogram of Downtown Distance\", x = \"Downtown Distance (mi)\", y = \"Count\") +\n  theme_minimal()\n\n# Log distance to downtown histogram.\nln_downtown_dist_hist <- ggplot(residential_points, aes(x = ln_city_dist)) +\n  geom_histogram(fill = \"darkblue\", color = \"white\") +\n  labs(title = \"Histogram of ln(Downtown Distance)\", x = \"ln(Downtown Distance)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(downtown_dist_hist, ln_downtown_dist_hist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nThe distribution of distance to Center City (City Hall) is right-skewed, with fewer observations of houses occurring as the distance from Center City/City Hall increases. The effect of distance on housing prices is non-linear: being 1 mile from Center City has a larger impact on price than being 6 vs. 11 miles out. To account for this, we applied a log transformation, which compresses the upper tail, creates a more symmetric distribution, and reduces the influence of extreme distances. This transformation improves linearity in our regression model and allows coefficients to be interpreted as proportional changes in price per proportional change in distance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# SEPTA buffer histogram.\nsepta_buffer_hist <- ggplot(residential_points, aes(x = septa_half_mi)) +\n  geom_histogram(fill = \"azure3\", color = \"white\") +\n  labs(title = \"Histogram of SEPTA 0.5mi Buffer\", x = \"SEPTA 0.5mi Buffer (mi)\", y = \"Count\") +\n  theme_minimal()\n\n# Log SEPTA buffer histogram.\nln_septa_buffer_hist <- ggplot(residential_points, aes(x = ln_septa_half_mi)) +\n  geom_histogram(fill = \"azure3\", color = \"white\") +\n  labs(title = \"Histogram of ln(SEPTA 0.5mi Buffer)\", x = \"ln(SEPTA 0.5mi Buffer)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(septa_buffer_hist, ln_septa_buffer_hist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nThe distribution of SEPTA access within a 0.5-mile buffer of each property is right-skewed, with a median of 44 and a mean of 52.5. While most properties have between 29 and 69 nearby SEPTA access points, there is substantial variation ranging from zero (likely remote suburban properties) to over 160 in the most transit-dense neighborhoods. The log transformation compresses this wide range and produces a more symmetric distribution, which is appropriate given that transit accessibility exhibits diminishing returns—the marginal benefit of additional access decreases as the total number increases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# kNN amenities histogram.\nknn_amenities_hist <- ggplot(residential_points, aes(x = knn_amenity_mi)) +\n  geom_histogram(fill = \"darkseagreen\", color = \"white\") +\n  labs(title = \"Histogram of kNN Amenities\", x = \"kNN Amenities (mi)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(knn_amenities_hist)\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nFor the kNN Amenities variable, the mean distance to the nearest amenity per household is 0.31 miles, and the median is 0.27 miles. Seventy-five percent of households are within 0.42 miles of any of the 23 amenities described in the data cleaning section. These statistics showcase Philadelphia’s reputation as a highly walkable city. Observations beyond 1 mile typically reflect suburban or rural settings. We did not transform this variable, instead using the raw distances to preserve the direct relationship between amenity proximity and property values.The kNN approach inherently reflects local amenity density, with shorter distances in denser areas and longer distances where households are more dispersed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distance to park histogram..\nparks_dist <- ggplot(residential_points, aes(x = parks_mile)) +\n  geom_histogram(fill = \"darkgreen\", color = \"white\") +\n  labs(title = \"Histogram of Parks Distance\", x = \"Parks Distance (mi)\", y = \"Count\") +\n  theme_minimal()\n\n# Log distance to park histogram.\nln_parks_dist <- ggplot(residential_points, aes(x = ln_park_dist)) +\n  geom_histogram(fill = \"darkgreen\", color = \"white\") +\n  labs(title = \"Histogram of ln(Parks Distance)\", x = \"Parks Distance\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(parks_dist, ln_parks_dist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nThe distribution of the variable Distance from Parks by miles is showing a slight right skew. Between the third quartile and the maximum there is a jump of about 3 miles, indicating outliers beyond 2 miles. Due to this, we chose to log the variable to ensure it is normal for our model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of bathrooms histogram.\nggplot(residential_points, aes(x = bath_num)) +\n  geom_histogram(fill = \"gold\", color = \"white\") +\n  labs(title = \"Histogram of Bathrooms\", x = \"Bathrooms\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\nThe histogram showcases the number of observations of properties with n bathrooms. Most observations exhibit 1 or 2 bathrooms per property, with a an outlier of 8 bathrooms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of fireplaces histogram.\nggplot(residential_points, aes(x = fireplace_num)) +\n  geom_histogram(fill = \"darkred\", color = \"white\") +\n  labs(title = \"Histogram of Fireplaces\", x = \"Fireplaces\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\nThis histogram showcases the number of observations with n fireplaces. Most observations contain 0 fireplaces, with outliers of property(ies) containing 2 or more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of garages histogram.\nggplot(residential_points, aes(x = garage_num)) +\n  geom_histogram(fill = \"gray\", color = \"white\") +\n  labs(title = \"Histogram of Garages\", x = \"Garages\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\nThis histogram showcases the number of garages available per observation. The median is 0 garages per property, with a maximum of 5 garages per property.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of stories histogram.\nggplot(residential_points, aes(x = story_num)) +\n  geom_histogram(fill = \"orange\", color = \"white\") +\n  labs(title = \"Histogram of Stories\", x = \"Stories\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\nThis histogram showcases the number of observations that contain n housing stories. The median is 2 stories per property, with a maximum of 5 stories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Age histogram.\nggplot(residential_points, aes(x = age)) +\n  geom_histogram(fill = \"black\", color = \"white\") +\n  labs(title = \"Histogram of Age\", x = \"Age\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\nThis histogram showcases the amount of observations with their calculated ages (years) based off year built. The median age is 100 years, and the maximum is 275 years. This was then transformed into a polynomial variable to account for the decrease in housing price as the home ages until a certain age, then the price rises again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for pct_poverty\nggplot(philly_acs_summary, aes(x = pct_poverty)) +\n  geom_histogram(fill = \"skyblue\", color = \"white\") +\n  labs(title = \"Histogram of Percent Poverty\", x = \"Percent Poverty (%)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\nThis histogram presents the tracts with their determined percent poverty. The percentage is suspiciously high with the range from the minimum (0%) from the first quartile is 98 percent.We also have 32 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for pct_bach\nggplot(philly_acs_summary, aes(x = pct_bach)) +\n  geom_histogram(binwidth = 5, fill = \"lightgreen\", color = \"white\") +\n  labs(title = \"Histogram of Percent Bachelor Degree Holders\", x = \"Percent Bachelor Degree Holders (%)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\nThis histogram shows the distribution of percent of bachelor + degree holders per census tract. The median is 13.5 %, with most tracts falling between the minimum and third quartile. We also have 32 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for pct_vacant\nggplot(philly_acs_summary, aes(x = pct_vacant)) +\n  geom_histogram(binwidth = 10, fill = \"salmon\", color = \"white\") +\n  labs(title = \"Histogram of Percent Vacant Units\", x = \"Percent Vacant (%)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\nThis histogram shows the distribution of percent vacant residences within the census tracts. The median percentage of vacant homes is 8 percent. We also have 44 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for pct_single_family\nggplot(philly_acs_summary, aes(x = pct_single_family)) +\n  geom_histogram(binwidth = 5, fill = \"orange\", color = \"white\") +\n  labs(title = \"Histogram of Percent Single-Family Homes \", x = \"Percent Single-Family (%)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\nThis histogram represents the percent of single families per tract. The median for percent single families per tract is 66.58%. We also have 45 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for medhhinc\nggplot(philly_acs_summary, aes(x = medhhinc)) +\n  geom_histogram(binwidth = 10000, fill = \"purple\", color = \"white\") +\n  labs(title = \"Histogram of Median Household Income\", x = \"Median Household Income ($)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nThis histogram represents the median household income value per census tract. The median of the median household income value is $66,795. Slightly right-skewed. We also have 32 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Residential property correlation.\ncorr_matrix_df <- final_data %>%\n  select(1:22) %>%\n  st_drop_geometry()\n\ncorr_matrix <- round(cor(na.omit(corr_matrix_df)), 2)\n\ncorr_matrix_plot <- ggcorrplot(corr_matrix,\n                               title = \"Correlation Matrix\",\n                               hc.order = FALSE,\n                               method = \"square\",\n                               lab = TRUE,\n                               lab_size = 3,\n                               colors = c(\"#6D9EC1\", \"white\", \"#E46726\"),\n                               ggtheme = ggplot2::theme_gray,\n                               insig = \"blank\"\n                               )\n\ncorr_matrix_plot\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-53-1.png){width=960}\n:::\n\n```{.r .cell-code}\n#ggsave(\"correlation_matrix.png\", width = 8, height = 8, dpi = 400)\n```\n:::\n\n\n5 strongest correlations to price:\n\n- square feet\n\n- bathrooms\n\n- median income\n\n- percent bachelor's\n\n- fireplaces\n\nSeems like bachelor degrees are highly correlated with median income, and should be excluded as a predictor.\n\n# Model Building\n\n## Model Building Progression\n\n**Check for multicollinearity:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# VIF check for multicollinearity.\nvif_check <- lm(ln_sale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + story_num  + garage_num + ln_septa_half_mi + ln_park_dist + ln_city_dist + basement_type + fuel_type, data = residential_points)\n\nvif(vif_check)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     GVIF Df GVIF^(1/(2*Df))\nln_square_feet   2.141293  1        1.463316\nbath_num         1.898869  1        1.377995\nac_binary        1.321625  1        1.149619\nfireplace_num    1.255247  1        1.120378\nstory_num        1.484250  1        1.218298\ngarage_num       2.278772  1        1.509560\nln_septa_half_mi 3.027921  1        1.740092\nln_park_dist     1.042800  1        1.021176\nln_city_dist     3.375708  1        1.837310\nbasement_type    3.090736 10        1.058042\nfuel_type        1.049685  3        1.008114\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build Model step by step\n# First Model (structural features only)\n\nfirst_model <- lm(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2), # Age polynomial.\n                    data = final_data)\n\nsummary(first_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ ln_square_feet + bath_num + ac_binary + \n    fireplace_num + story_num + garage_num + basement_type + \n    fuel_type + age + I(age^2), data = final_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-946748  -77732  -12797   55389 4964714 \n\nCoefficients:\n                                          Estimate    Std. Error t value\n(Intercept)                          -1600341.5644    47253.3429 -33.867\nln_square_feet                         269653.6615     6788.7652  39.721\nbath_num                                50882.9698     2849.4691  17.857\nac_binary                               92503.4518     3521.1431  26.271\nfireplace_num                          139112.9209     4562.8499  30.488\nstory_num                               35580.0358     3368.1737  10.564\ngarage_num                              73100.2236     4143.2172  17.643\nbasement_typeFull Finished             -56656.4572    10210.3683  -5.549\nbasement_typeFull Semi-Finished        -68695.6797    11788.3042  -5.827\nbasement_typeFull Unfinished           -71544.1253    10619.4100  -6.737\nbasement_typeFull Unknown Finish       -85234.6422    10988.6228  -7.757\nbasement_typePartial Finished         -123696.2917    10824.4574 -11.427\nbasement_typePartial Semi-Finished    -134365.3131    11283.6000 -11.908\nbasement_typePartial Unfinished       -128970.6719    13686.9805  -9.423\nbasement_typePartial Unknown Finish   -135902.6994    13315.8037 -10.206\nbasement_typeUnknown Size Finished      58578.8098    49757.4371   1.177\nbasement_typeUnknown Size Unfinished   -25344.9839    38787.2223  -0.653\nfuel_typeElectric                       -9301.9858    10307.7869  -0.902\nfuel_typeOil Heat                        -540.2228    20885.3920  -0.026\nfuel_typeOther                         257792.1255    62355.3517   4.134\nage                                     -4478.8377      145.9713 -30.683\nI(age^2)                                   26.3993        0.8056  32.769\n                                                 Pr(>|t|)    \n(Intercept)                          < 0.0000000000000002 ***\nln_square_feet                       < 0.0000000000000002 ***\nbath_num                             < 0.0000000000000002 ***\nac_binary                            < 0.0000000000000002 ***\nfireplace_num                        < 0.0000000000000002 ***\nstory_num                            < 0.0000000000000002 ***\ngarage_num                           < 0.0000000000000002 ***\nbasement_typeFull Finished            0.00000002927742725 ***\nbasement_typeFull Semi-Finished       0.00000000575462653 ***\nbasement_typeFull Unfinished          0.00000000001680098 ***\nbasement_typeFull Unknown Finish      0.00000000000000933 ***\nbasement_typePartial Finished        < 0.0000000000000002 ***\nbasement_typePartial Semi-Finished   < 0.0000000000000002 ***\nbasement_typePartial Unfinished      < 0.0000000000000002 ***\nbasement_typePartial Unknown Finish  < 0.0000000000000002 ***\nbasement_typeUnknown Size Finished                  0.239    \nbasement_typeUnknown Size Unfinished                0.513    \nfuel_typeElectric                                   0.367    \nfuel_typeOil Heat                                   0.979    \nfuel_typeOther                        0.00003582455204890 ***\nage                                  < 0.0000000000000002 ***\nI(age^2)                             < 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 175600 on 13720 degrees of freedom\nMultiple R-squared:  0.5926,\tAdjusted R-squared:  0.592 \nF-statistic: 950.5 on 21 and 13720 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build Model step by step\n# Second Model (structural features + census features)\n\nsecond_model <- lm(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family, # Census feature.\n                    data = final_data)\n\nsummary(second_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ ln_square_feet + bath_num + ac_binary + \n    fireplace_num + story_num + garage_num + basement_type + \n    fuel_type + age + I(age^2) + medhhinc + pct_vacant + pct_single_family, \n    data = final_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-986519  -66233   -4791   50723 5083386 \n\nCoefficients:\n                                           Estimate     Std. Error t value\n(Intercept)                          -1657315.06881    43605.53969 -38.007\nln_square_feet                         253118.55357     6307.84302  40.128\nbath_num                                57006.19468     2628.26335  21.690\nac_binary                               51835.01737     3358.99340  15.432\nfireplace_num                          123565.08573     4242.29279  29.127\nstory_num                                7968.41354     3192.54360   2.496\ngarage_num                              78214.57757     3858.22989  20.272\nbasement_typeFull Finished             -14732.49113     9430.76150  -1.562\nbasement_typeFull Semi-Finished        -32016.37282    10875.01516  -2.944\nbasement_typeFull Unfinished           -29578.12515     9803.78380  -3.017\nbasement_typeFull Unknown Finish       -37097.04187    10153.08951  -3.654\nbasement_typePartial Finished          -85338.66669    10006.30270  -8.528\nbasement_typePartial Semi-Finished     -84103.05213    10454.72829  -8.044\nbasement_typePartial Unfinished        -77849.36109    12644.21848  -6.157\nbasement_typePartial Unknown Finish    -89193.51530    12299.71498  -7.252\nbasement_typeUnknown Size Finished      94023.39096    45782.49895   2.054\nbasement_typeUnknown Size Unfinished    17742.27294    35702.54782   0.497\nfuel_typeElectric                        4024.94651     9509.01594   0.423\nfuel_typeOil Heat                       -8357.59723    19218.43367  -0.435\nfuel_typeOther                         146353.99212    57422.32275   2.549\nage                                     -3216.68050      136.72500 -23.527\nI(age^2)                                   19.96630        0.75560  26.424\nmedhhinc                                    2.62135        0.05512  47.556\npct_vacant                                506.82584      221.43981   2.289\npct_single_family                       -1820.98270      167.65022 -10.862\n                                                 Pr(>|t|)    \n(Intercept)                          < 0.0000000000000002 ***\nln_square_feet                       < 0.0000000000000002 ***\nbath_num                             < 0.0000000000000002 ***\nac_binary                            < 0.0000000000000002 ***\nfireplace_num                        < 0.0000000000000002 ***\nstory_num                                        0.012574 *  \ngarage_num                           < 0.0000000000000002 ***\nbasement_typeFull Finished                       0.118270    \nbasement_typeFull Semi-Finished                  0.003245 ** \nbasement_typeFull Unfinished                     0.002557 ** \nbasement_typeFull Unknown Finish                 0.000259 ***\nbasement_typePartial Finished        < 0.0000000000000002 ***\nbasement_typePartial Semi-Finished   0.000000000000000937 ***\nbasement_typePartial Unfinished      0.000000000762449291 ***\nbasement_typePartial Unknown Finish  0.000000000000433699 ***\nbasement_typeUnknown Size Finished               0.040024 *  \nbasement_typeUnknown Size Unfinished             0.619234    \nfuel_typeElectric                                0.672100    \nfuel_typeOil Heat                                0.663661    \nfuel_typeOther                                   0.010822 *  \nage                                  < 0.0000000000000002 ***\nI(age^2)                             < 0.0000000000000002 ***\nmedhhinc                             < 0.0000000000000002 ***\npct_vacant                                       0.022108 *  \npct_single_family                    < 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 161500 on 13717 degrees of freedom\nMultiple R-squared:  0.6555,\tAdjusted R-squared:  0.6549 \nF-statistic:  1087 on 24 and 13717 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build Model step by step\n# Third Model (structural features + census features + spatial features)\n\nthird_model <- lm(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family + # Census feature.\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi, # Spatial \n                    data = final_data)\n\nsummary(third_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ ln_square_feet + bath_num + ac_binary + \n    fireplace_num + story_num + garage_num + basement_type + \n    fuel_type + age + I(age^2) + medhhinc + pct_vacant + pct_single_family + \n    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi, \n    data = final_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-816942  -62918   -2847   50974 5091643 \n\nCoefficients:\n                                           Estimate     Std. Error t value\n(Intercept)                          -1781195.80963    42334.56160 -42.074\nln_square_feet                         263309.01771     6049.05829  43.529\nbath_num                                50713.57098     2526.41632  20.073\nac_binary                               46036.50868     3229.25216  14.256\nfireplace_num                          127678.22421     4059.52596  31.452\nstory_num                               -3447.03355     3085.21586  -1.117\ngarage_num                              87656.05910     3701.77217  23.679\nbasement_typeFull Finished               5895.68799     9057.10484   0.651\nbasement_typeFull Semi-Finished         -4392.18676    10439.57843  -0.421\nbasement_typeFull Unfinished            -9094.58940     9422.68066  -0.965\nbasement_typeFull Unknown Finish       -16102.64276     9754.15342  -1.651\nbasement_typePartial Finished          -41565.01250     9663.05277  -4.301\nbasement_typePartial Semi-Finished     -38554.36301    10136.29140  -3.804\nbasement_typePartial Unfinished        -47551.21985    12124.43903  -3.922\nbasement_typePartial Unknown Finish    -56260.00839    11798.54030  -4.768\nbasement_typeUnknown Size Finished     119709.84911    43779.33316   2.734\nbasement_typeUnknown Size Unfinished    36743.10664    34139.64024   1.076\nfuel_typeElectric                        3252.26875     9092.12397   0.358\nfuel_typeOil Heat                        1068.57062    18378.08170   0.058\nfuel_typeOther                         101957.26849    54918.42690   1.857\nage                                     -2566.18573      132.11722 -19.424\nI(age^2)                                   14.65461        0.73820  19.852\nmedhhinc                                    2.08972        0.05605  37.282\npct_vacant                              -1064.56769      225.95522  -4.711\npct_single_family                         721.85615      182.79866   3.949\ncity_dist_mi                            -2525.63513      765.79341  -3.298\nsepta_half_mi                            1838.63667       70.22731  26.181\nln_park_dist                           -16813.69954     2091.60942  -8.039\nknn_amenity_mi                         -11750.98383     8566.09770  -1.372\n                                                 Pr(>|t|)    \n(Intercept)                          < 0.0000000000000002 ***\nln_square_feet                       < 0.0000000000000002 ***\nbath_num                             < 0.0000000000000002 ***\nac_binary                            < 0.0000000000000002 ***\nfireplace_num                        < 0.0000000000000002 ***\nstory_num                                        0.263896    \ngarage_num                           < 0.0000000000000002 ***\nbasement_typeFull Finished                       0.515092    \nbasement_typeFull Semi-Finished                  0.673963    \nbasement_typeFull Unfinished                     0.334471    \nbasement_typeFull Unknown Finish                 0.098792 .  \nbasement_typePartial Finished        0.000017086847334551 ***\nbasement_typePartial Semi-Finished               0.000143 ***\nbasement_typePartial Unfinished      0.000088269793253619 ***\nbasement_typePartial Unknown Finish  0.000001876161074540 ***\nbasement_typeUnknown Size Finished               0.006258 ** \nbasement_typeUnknown Size Unfinished             0.281830    \nfuel_typeElectric                                0.720572    \nfuel_typeOil Heat                                0.953635    \nfuel_typeOther                                   0.063401 .  \nage                                  < 0.0000000000000002 ***\nI(age^2)                             < 0.0000000000000002 ***\nmedhhinc                             < 0.0000000000000002 ***\npct_vacant                           0.000002484237299472 ***\npct_single_family                    0.000078899018066142 ***\ncity_dist_mi                                     0.000976 ***\nsepta_half_mi                        < 0.0000000000000002 ***\nln_park_dist                         0.000000000000000982 ***\nknn_amenity_mi                                   0.170148    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 154400 on 13713 degrees of freedom\nMultiple R-squared:  0.6853,\tAdjusted R-squared:  0.6846 \nF-statistic:  1066 on 28 and 13713 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build Model step by step\n# Final Model \n## (structural features + census features + spatial features + interactions and fixed effects)\n\nfinal_model <- lm(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family + # Census feature.\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi + # Spatial \n                    knn_amenity_mi * city_dist_mi + septa_half_mi * city_dist_mi + # Interaction between amenities and downtown distance.\n                    neighborhood_fe + quarters_fe, # Fixed effect \n                    data = final_data)\n\nsummary(final_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ ln_square_feet + bath_num + ac_binary + \n    fireplace_num + story_num + garage_num + basement_type + \n    fuel_type + age + I(age^2) + medhhinc + pct_vacant + pct_single_family + \n    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi + \n    knn_amenity_mi * city_dist_mi + septa_half_mi * city_dist_mi + \n    neighborhood_fe + quarters_fe, data = final_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-797069  -47661    1774   44023 5122998 \n\nCoefficients:\n                                                 Estimate     Std. Error\n(Intercept)                                -1680423.17837    45558.65141\nln_square_feet                               265937.03690     5681.37118\nbath_num                                      43663.93044     2310.00232\nac_binary                                     38464.17499     3023.18590\nfireplace_num                                 88608.64257     3853.51007\nstory_num                                     -4144.06972     2940.58826\ngarage_num                                    77189.41047     3409.24428\nbasement_typeFull Finished                    98525.27985     8828.49735\nbasement_typeFull Semi-Finished               88799.65176     9987.28877\nbasement_typeFull Unfinished                  78498.57361     9132.28816\nbasement_typeFull Unknown Finish              70571.65644     9388.12707\nbasement_typePartial Finished                 45806.43683     9334.39091\nbasement_typePartial Semi-Finished            42102.78827     9834.77606\nbasement_typePartial Unfinished               34619.35768    11416.85091\nbasement_typePartial Unknown Finish           28615.58029    11146.88289\nbasement_typeUnknown Size Finished           164012.01649    39570.27927\nbasement_typeUnknown Size Unfinished         129088.32440    30905.12976\nfuel_typeElectric                            -10424.55766     8245.32392\nfuel_typeOil Heat                              4650.15056    16495.40912\nfuel_typeOther                                 5774.27149    49418.05374\nage                                           -1460.87062      129.89087\nI(age^2)                                          5.81812        0.74348\nmedhhinc                                          0.60322        0.08449\npct_vacant                                     -965.50624      293.85463\npct_single_family                               212.09860      214.62153\ncity_dist_mi                                  -4553.57975     3216.84114\nsepta_half_mi                                  1424.35076      193.72573\nln_park_dist                                  -6814.18834     4839.55248\nknn_amenity_mi                               -18870.06231    24171.57110\nneighborhood_feAcademy Gardens                30669.64847    29014.63400\nneighborhood_feAllegheny West                -84326.20368    19908.73956\nneighborhood_feAndorra                       -43018.51128    30565.19587\nneighborhood_feAston-Woodbridge               29590.48833    33122.43202\nneighborhood_feBella Vista                    85541.46383    24484.74222\nneighborhood_feBelmont                       -81778.48637    41082.96239\nneighborhood_feBrewerytown                   -77421.65693    18824.34153\nneighborhood_feBridesburg                      1710.91055    22154.76396\nneighborhood_feBurholme                      -18606.61082    36054.50784\nneighborhood_feBustleton                      22257.51027    24641.24298\nneighborhood_feCarroll Park                  -84704.42396    20556.02393\nneighborhood_feCedar Park                     42867.20752    21553.82620\nneighborhood_feCedarbrook                    -25188.42562    23491.31873\nneighborhood_feChestnut Hill                 397454.21064    20963.48914\nneighborhood_feClearview                     -91779.28146    31929.38435\nneighborhood_feCobbs Creek                   -84903.74356    16233.31855\nneighborhood_feDickinson Narrows             -51551.39712    20637.84635\nneighborhood_feDunlap                       -156952.79384    34756.05799\nneighborhood_feEast Germantown               -60417.36691    22418.31503\nneighborhood_feEast Kensington               -30367.71927    18619.09940\nneighborhood_feEast Mount Airy               -47517.28192    18313.99912\nneighborhood_feEast Oak Lane                -119250.18458    29126.52029\nneighborhood_feEast Parkside                -105116.02099    42890.08173\nneighborhood_feEast Passyunk                  17261.48248    19775.56206\nneighborhood_feEastwick                      -72554.39138    34336.10964\nneighborhood_feElmwood                       -69789.44000    18216.99419\nneighborhood_feFairhill                      -77286.29111    39526.22758\nneighborhood_feFairmount                      74788.51989    18110.38937\nneighborhood_feFeltonville                   -68221.00791    19970.91688\nneighborhood_feFern Rock                     -88213.88974    34310.11295\nneighborhood_feFishtown - Lower Kensington     6642.75225    15468.02532\nneighborhood_feFitler Square                 428945.20103    30583.16380\nneighborhood_feFox Chase                      -8172.98510    21418.40111\nneighborhood_feFrancisville                  -60922.30928    23396.55254\nneighborhood_feFrankford                     -68727.49076    18721.31012\nneighborhood_feFranklinville                -135336.58871    30074.41651\nneighborhood_feGermantown - Morton           -75339.08463    26885.42269\nneighborhood_feGermantown - Penn Knox       -147182.95037    44224.89002\nneighborhood_feGermantown - Westside        -106892.87655    39218.96860\nneighborhood_feGermany Hill                    3641.09771    26058.81120\nneighborhood_feGirard Estates                -36298.68952    18908.17503\nneighborhood_feGlenwood                     -124379.12793    29176.82389\nneighborhood_feGraduate Hospital              92492.11696    19943.72065\nneighborhood_feGrays Ferry                   -81372.93890    17428.02925\nneighborhood_feGreenwich                     -69478.31525    25173.77597\nneighborhood_feHaddington                    -92703.28897    18515.45588\nneighborhood_feHarrowgate                    -61400.43416    19376.40807\nneighborhood_feHartranft                    -136237.57343    23155.29187\nneighborhood_feHawthorne                       8354.36976    28773.97721\nneighborhood_feHolmesburg                    -24162.62772    20540.88797\nneighborhood_feHunting Park                  -60762.49980    22033.99309\nneighborhood_feJuniata Park                  -54461.67540    17926.20525\nneighborhood_feKingsessing                  -105736.34718    17253.09686\nneighborhood_feLawndale                      -45643.13310    17679.63001\nneighborhood_feLexington Park                 16746.99936    28470.63535\nneighborhood_feLogan                        -104336.51091    19993.43638\nneighborhood_feLogan Square                  371677.31683    30110.85397\nneighborhood_feLower Moyamensing             -70518.79528    17469.14127\nneighborhood_feManayunk                       20785.71956    18185.41191\nneighborhood_feMantua                        -97200.81354    27624.82311\nneighborhood_feMayfair                       -18012.86446    18324.60681\nneighborhood_feMelrose Park Gardens          -74349.82030    31937.39166\nneighborhood_feMill Creek                   -113008.50944    26822.82923\nneighborhood_feMillbrook                      13044.88706    30535.35647\nneighborhood_feModena                         49978.90381    28499.29876\nneighborhood_feMorrell Park                   18289.30618    27895.75298\nneighborhood_feNewbold                       -60272.32918    21772.58513\nneighborhood_feNicetown                      -69814.36099    37978.26098\nneighborhood_feNormandy Village              145245.77189    48998.78581\nneighborhood_feNorth Central                -109392.15757    22147.45990\nneighborhood_feNorthern Liberties             -1915.64772    19218.85306\nneighborhood_feNorthwood                    -104643.74889    23314.18573\nneighborhood_feOgontz                        -44603.99265    20151.94816\nneighborhood_feOld City                      437057.82858    45068.46756\nneighborhood_feOld Kensington                -51347.96127    20313.31020\nneighborhood_feOlney                         -75360.46915    17148.17482\nneighborhood_feOverbrook                     -97468.82258    17000.26405\nneighborhood_feOxford Circle                 -29216.20323    17815.62113\nneighborhood_fePacker Park                     1168.47197    25642.00121\nneighborhood_feParkwood Manor                 45962.04911    29491.33784\nneighborhood_fePaschall                      -76314.27498    20125.58805\nneighborhood_fePassyunk Square                 2240.73919    20602.82391\nneighborhood_fePennsport                     -37485.73218    19633.51732\nneighborhood_fePennypack                      -5582.98462    23874.93182\nneighborhood_fePennypack Woods                 4576.00314    46592.25036\nneighborhood_fePenrose                       -64836.46208    30724.87105\nneighborhood_fePoint Breeze                  -68957.41738    17701.03102\nneighborhood_feQueen Village                 105488.47678    21255.03813\nneighborhood_feRhawnhurst                      6640.73399    21732.57021\nneighborhood_feRichmond                      -32075.32706    15378.83550\nneighborhood_feRittenhouse                   421722.17051    26352.16981\nneighborhood_feRoxborough                      3864.67594    16120.16569\nneighborhood_feRoxborough Park               -41303.84099    32727.00509\nneighborhood_feSharswood                    -102909.47871    41154.89517\nneighborhood_feSociety Hill                  345350.83459    26079.97038\nneighborhood_feSomerton                       51084.57008    29047.05728\nneighborhood_feSouthwest Germantown         -107776.18251    24831.28612\nneighborhood_feSouthwest Schuylkill          -95017.78116    21103.31136\nneighborhood_feSpring Garden                 171517.01973    25804.63563\nneighborhood_feSpruce Hill                   126748.28677    29987.02426\nneighborhood_feStadium District              -28456.95502    21938.05783\nneighborhood_feStanton                      -140258.86393    21511.75897\nneighborhood_feStrawberry Mansion           -106030.57131    20726.83784\nneighborhood_feSummerdale                    -46187.87741    21709.89629\nneighborhood_feTacony                        -45600.58731    19886.66084\nneighborhood_feTioga                        -119468.81468    23729.82915\nneighborhood_feTorresdale                    -31364.19737    27023.70486\nneighborhood_feUpper Kensington              -93034.31125    18906.66383\nneighborhood_feUpper Roxborough              -37494.05482    20256.00247\nneighborhood_feWalnut Hill                   -67122.45328    30574.74421\nneighborhood_feWashington Square West         82800.69308    29877.55848\nneighborhood_feWest Central Germantown         6813.01484    27821.74276\nneighborhood_feWest Kensington               -74065.89375    20281.89566\nneighborhood_feWest Mount Airy                29317.91211    18493.81852\nneighborhood_feWest Oak Lane                 -52354.37842    18262.99934\nneighborhood_feWest Passyunk                 -83846.34957    19776.57784\nneighborhood_feWest Poplar                  -117546.61586    43427.12409\nneighborhood_feWest Powelton                -110672.71114    34305.38079\nneighborhood_feWhitman                       -48110.26150    18243.17836\nneighborhood_feWinchester Park                32508.21786    34632.32742\nneighborhood_feWissahickon                    -3310.11898    20232.93473\nneighborhood_feWissahickon Hills               6748.29913    32288.28238\nneighborhood_feWissinoming                   -29898.14143    18379.86906\nneighborhood_feWister                        -77071.61727    31383.32050\nneighborhood_feWynnefield                   -106313.16098    20099.54235\nneighborhood_feSmall Neighborhoods           -33519.28313    19019.55028\nquarters_fe2                                   3266.17711     3382.86756\nquarters_fe3                                   4915.70677     3441.82750\nquarters_fe4                                   5563.97881     3572.92555\ncity_dist_mi:knn_amenity_mi                    1442.35933     2651.46269\ncity_dist_mi:septa_half_mi                     -332.87956       41.37260\n                                           t value             Pr(>|t|)    \n(Intercept)                                -36.885 < 0.0000000000000002 ***\nln_square_feet                              46.809 < 0.0000000000000002 ***\nbath_num                                    18.902 < 0.0000000000000002 ***\nac_binary                                   12.723 < 0.0000000000000002 ***\nfireplace_num                               22.994 < 0.0000000000000002 ***\nstory_num                                   -1.409             0.158780    \ngarage_num                                  22.641 < 0.0000000000000002 ***\nbasement_typeFull Finished                  11.160 < 0.0000000000000002 ***\nbasement_typeFull Semi-Finished              8.891 < 0.0000000000000002 ***\nbasement_typeFull Unfinished                 8.596 < 0.0000000000000002 ***\nbasement_typeFull Unknown Finish             7.517 0.000000000000059500 ***\nbasement_typePartial Finished                4.907 0.000000934211114953 ***\nbasement_typePartial Semi-Finished           4.281 0.000018732246351384 ***\nbasement_typePartial Unfinished              3.032             0.002432 ** \nbasement_typePartial Unknown Finish          2.567             0.010265 *  \nbasement_typeUnknown Size Finished           4.145 0.000034213112365352 ***\nbasement_typeUnknown Size Unfinished         4.177 0.000029732574826675 ***\nfuel_typeElectric                           -1.264             0.206144    \nfuel_typeOil Heat                            0.282             0.778020    \nfuel_typeOther                               0.117             0.906984    \nage                                        -11.247 < 0.0000000000000002 ***\nI(age^2)                                     7.825 0.000000000000005429 ***\nmedhhinc                                     7.139 0.000000000000985048 ***\npct_vacant                                  -3.286             0.001020 ** \npct_single_family                            0.988             0.323050    \ncity_dist_mi                                -1.416             0.156932    \nsepta_half_mi                                7.352 0.000000000000205800 ***\nln_park_dist                                -1.408             0.159148    \nknn_amenity_mi                              -0.781             0.435009    \nneighborhood_feAcademy Gardens               1.057             0.290512    \nneighborhood_feAllegheny West               -4.236 0.000022940570064266 ***\nneighborhood_feAndorra                      -1.407             0.159321    \nneighborhood_feAston-Woodbridge              0.893             0.371676    \nneighborhood_feBella Vista                   3.494             0.000478 ***\nneighborhood_feBelmont                      -1.991             0.046548 *  \nneighborhood_feBrewerytown                  -4.113 0.000039310930860351 ***\nneighborhood_feBridesburg                    0.077             0.938445    \nneighborhood_feBurholme                     -0.516             0.605815    \nneighborhood_feBustleton                     0.903             0.366403    \nneighborhood_feCarroll Park                 -4.121 0.000038002669715311 ***\nneighborhood_feCedar Park                    1.989             0.046738 *  \nneighborhood_feCedarbrook                   -1.072             0.283630    \nneighborhood_feChestnut Hill                18.959 < 0.0000000000000002 ***\nneighborhood_feClearview                    -2.874             0.004054 ** \nneighborhood_feCobbs Creek                  -5.230 0.000000171828553487 ***\nneighborhood_feDickinson Narrows            -2.498             0.012505 *  \nneighborhood_feDunlap                       -4.516 0.000006359727437564 ***\nneighborhood_feEast Germantown              -2.695             0.007048 ** \nneighborhood_feEast Kensington              -1.631             0.102914    \nneighborhood_feEast Mount Airy              -2.595             0.009481 ** \nneighborhood_feEast Oak Lane                -4.094 0.000042605651448194 ***\nneighborhood_feEast Parkside                -2.451             0.014265 *  \nneighborhood_feEast Passyunk                 0.873             0.382750    \nneighborhood_feEastwick                     -2.113             0.034613 *  \nneighborhood_feElmwood                      -3.831             0.000128 ***\nneighborhood_feFairhill                     -1.955             0.050566 .  \nneighborhood_feFairmount                     4.130 0.000036558118918651 ***\nneighborhood_feFeltonville                  -3.416             0.000637 ***\nneighborhood_feFern Rock                    -2.571             0.010149 *  \nneighborhood_feFishtown - Lower Kensington   0.429             0.667602    \nneighborhood_feFitler Square                14.026 < 0.0000000000000002 ***\nneighborhood_feFox Chase                    -0.382             0.702774    \nneighborhood_feFrancisville                 -2.604             0.009227 ** \nneighborhood_feFrankford                    -3.671             0.000242 ***\nneighborhood_feFranklinville                -4.500 0.000006849957506002 ***\nneighborhood_feGermantown - Morton          -2.802             0.005082 ** \nneighborhood_feGermantown - Penn Knox       -3.328             0.000877 ***\nneighborhood_feGermantown - Westside        -2.726             0.006428 ** \nneighborhood_feGermany Hill                  0.140             0.888878    \nneighborhood_feGirard Estates               -1.920             0.054912 .  \nneighborhood_feGlenwood                     -4.263 0.000020311449479471 ***\nneighborhood_feGraduate Hospital             4.638 0.000003556691191596 ***\nneighborhood_feGrays Ferry                  -4.669 0.000003054412626027 ***\nneighborhood_feGreenwich                    -2.760             0.005789 ** \nneighborhood_feHaddington                   -5.007 0.000000560346626112 ***\nneighborhood_feHarrowgate                   -3.169             0.001534 ** \nneighborhood_feHartranft                    -5.884 0.000000004107739554 ***\nneighborhood_feHawthorne                     0.290             0.771557    \nneighborhood_feHolmesburg                   -1.176             0.239488    \nneighborhood_feHunting Park                 -2.758             0.005829 ** \nneighborhood_feJuniata Park                 -3.038             0.002385 ** \nneighborhood_feKingsessing                  -6.129 0.000000000911404708 ***\nneighborhood_feLawndale                     -2.582             0.009842 ** \nneighborhood_feLexington Park                0.588             0.556394    \nneighborhood_feLogan                        -5.219 0.000000182996833996 ***\nneighborhood_feLogan Square                 12.344 < 0.0000000000000002 ***\nneighborhood_feLower Moyamensing            -4.037 0.000054490920980685 ***\nneighborhood_feManayunk                      1.143             0.253063    \nneighborhood_feMantua                       -3.519             0.000435 ***\nneighborhood_feMayfair                      -0.983             0.325631    \nneighborhood_feMelrose Park Gardens         -2.328             0.019927 *  \nneighborhood_feMill Creek                   -4.213 0.000025346340673632 ***\nneighborhood_feMillbrook                     0.427             0.669236    \nneighborhood_feModena                        1.754             0.079506 .  \nneighborhood_feMorrell Park                  0.656             0.512073    \nneighborhood_feNewbold                      -2.768             0.005643 ** \nneighborhood_feNicetown                     -1.838             0.066044 .  \nneighborhood_feNormandy Village              2.964             0.003039 ** \nneighborhood_feNorth Central                -4.939 0.000000793507275168 ***\nneighborhood_feNorthern Liberties           -0.100             0.920603    \nneighborhood_feNorthwood                    -4.488 0.000007234509435205 ***\nneighborhood_feOgontz                       -2.213             0.026888 *  \nneighborhood_feOld City                      9.698 < 0.0000000000000002 ***\nneighborhood_feOld Kensington               -2.528             0.011489 *  \nneighborhood_feOlney                        -4.395 0.000011178568619381 ***\nneighborhood_feOverbrook                    -5.733 0.000000010054841725 ***\nneighborhood_feOxford Circle                -1.640             0.101045    \nneighborhood_fePacker Park                   0.046             0.963655    \nneighborhood_feParkwood Manor                1.558             0.119140    \nneighborhood_fePaschall                     -3.792             0.000150 ***\nneighborhood_fePassyunk Square               0.109             0.913395    \nneighborhood_fePennsport                    -1.909             0.056248 .  \nneighborhood_fePennypack                    -0.234             0.815110    \nneighborhood_fePennypack Woods               0.098             0.921764    \nneighborhood_fePenrose                      -2.110             0.034857 *  \nneighborhood_fePoint Breeze                 -3.896 0.000098396171956079 ***\nneighborhood_feQueen Village                 4.963 0.000000702585015746 ***\nneighborhood_feRhawnhurst                    0.306             0.759940    \nneighborhood_feRichmond                     -2.086             0.037026 *  \nneighborhood_feRittenhouse                  16.003 < 0.0000000000000002 ***\nneighborhood_feRoxborough                    0.240             0.810534    \nneighborhood_feRoxborough Park              -1.262             0.206945    \nneighborhood_feSharswood                    -2.501             0.012412 *  \nneighborhood_feSociety Hill                 13.242 < 0.0000000000000002 ***\nneighborhood_feSomerton                      1.759             0.078654 .  \nneighborhood_feSouthwest Germantown         -4.340 0.000014329244783269 ***\nneighborhood_feSouthwest Schuylkill         -4.503 0.000006771596548580 ***\nneighborhood_feSpring Garden                 6.647 0.000000000031106684 ***\nneighborhood_feSpruce Hill                   4.227 0.000023861807553049 ***\nneighborhood_feStadium District             -1.297             0.194602    \nneighborhood_feStanton                      -6.520 0.000000000072743521 ***\nneighborhood_feStrawberry Mansion           -5.116 0.000000316978788212 ***\nneighborhood_feSummerdale                   -2.128             0.033396 *  \nneighborhood_feTacony                       -2.293             0.021862 *  \nneighborhood_feTioga                        -5.035 0.000000485129454051 ***\nneighborhood_feTorresdale                   -1.161             0.245818    \nneighborhood_feUpper Kensington             -4.921 0.000000872393876726 ***\nneighborhood_feUpper Roxborough             -1.851             0.064190 .  \nneighborhood_feWalnut Hill                  -2.195             0.028155 *  \nneighborhood_feWashington Square West        2.771             0.005590 ** \nneighborhood_feWest Central Germantown       0.245             0.806552    \nneighborhood_feWest Kensington              -3.652             0.000261 ***\nneighborhood_feWest Mount Airy               1.585             0.112926    \nneighborhood_feWest Oak Lane                -2.867             0.004154 ** \nneighborhood_feWest Passyunk                -4.240 0.000022531934561275 ***\nneighborhood_feWest Poplar                  -2.707             0.006803 ** \nneighborhood_feWest Powelton                -3.226             0.001258 ** \nneighborhood_feWhitman                      -2.637             0.008370 ** \nneighborhood_feWinchester Park               0.939             0.347919    \nneighborhood_feWissahickon                  -0.164             0.870048    \nneighborhood_feWissahickon Hills             0.209             0.834450    \nneighborhood_feWissinoming                  -1.627             0.103829    \nneighborhood_feWister                       -2.456             0.014069 *  \nneighborhood_feWynnefield                   -5.289 0.000000124669047179 ***\nneighborhood_feSmall Neighborhoods          -1.762             0.078031 .  \nquarters_fe2                                 0.966             0.334309    \nquarters_fe3                                 1.428             0.153250    \nquarters_fe4                                 1.557             0.119432    \ncity_dist_mi:knn_amenity_mi                  0.544             0.586460    \ncity_dist_mi:septa_half_mi                  -8.046 0.000000000000000927 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 137800 on 13582 degrees of freedom\nMultiple R-squared:  0.7515,\tAdjusted R-squared:  0.7486 \nF-statistic: 258.3 on 159 and 13582 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step model to check for most influential predictors.\nstep_model <- step(final_model, direction = \"both\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStart:  AIC=325399.2\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + fuel_type + age + \n    I(age^2) + medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + knn_amenity_mi + knn_amenity_mi * \n    city_dist_mi + septa_half_mi * city_dist_mi + neighborhood_fe + \n    quarters_fe\n\n                               Df      Sum of Sq             RSS    AIC\n- fuel_type                     3    32389297317 258062730389632 325395\n- quarters_fe                   3    55701981498 258086043073814 325396\n- city_dist_mi:knn_amenity_mi   1     5621897811 258035962990126 325397\n- pct_single_family             1    18553936107 258048895028423 325398\n<none>                                           258030341092316 325399\n- ln_park_dist                  1    37663867116 258068004959431 325399\n- story_num                     1    37730513689 258068071606004 325399\n- pct_vacant                    1   205093618832 258235434711147 325408\n- medhhinc                      1   968344699087 258998685791402 325449\n- I(age^2)                      1  1163402365725 259193743458040 325459\n- city_dist_mi:septa_half_mi    1  1229859942648 259260201034963 325463\n- age                           1  2403108130952 260433449223268 325525\n- ac_binary                     1  3075319104067 261105660196382 325560\n- basement_type                10  4972830458159 263003171550474 325642\n- bath_num                      1  6787781798786 264818122891102 325754\n- garage_num                    1  9738818198436 267769159290752 325906\n- fireplace_num                 1 10044913943096 268075255035411 325922\n- ln_square_feet                1 41625395516378 299655736608694 327452\n- neighborhood_fe             126 53653286818295 311683627910610 327743\n\nStep:  AIC=325394.9\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + knn_amenity_mi + neighborhood_fe + \n    quarters_fe + city_dist_mi:knn_amenity_mi + city_dist_mi:septa_half_mi\n\n                               Df      Sum of Sq             RSS    AIC\n- quarters_fe                   3    54387890031 258117118279664 325392\n- city_dist_mi:knn_amenity_mi   1     5819486123 258068549875755 325393\n- pct_single_family             1    18231861940 258080962251573 325394\n- story_num                     1    37234777160 258099965166792 325395\n<none>                                           258062730389632 325395\n- ln_park_dist                  1    38176077779 258100906467411 325395\n+ fuel_type                     3    32389297317 258030341092316 325399\n- pct_vacant                    1   209675335538 258272405725170 325404\n- medhhinc                      1   973197176055 259035927565687 325445\n- I(age^2)                      1  1162088500866 259224818890498 325455\n- city_dist_mi:septa_half_mi    1  1233833768960 259296564158592 325458\n- age                           1  2396993729867 260459724119499 325520\n- ac_binary                     1  3139018476709 261201748866342 325559\n- basement_type                10  4999114710757 263061845100389 325639\n- bath_num                      1  6766976732963 264829707122595 325749\n- garage_num                    1  9763652361538 267826382751170 325903\n- fireplace_num                 1 10088592404525 268151322794158 325920\n- ln_square_feet                1 41849100885222 299911831274855 327458\n- neighborhood_fe             126 53686799108094 311749529497726 327740\n\nStep:  AIC=325391.8\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + knn_amenity_mi + neighborhood_fe + \n    city_dist_mi:knn_amenity_mi + city_dist_mi:septa_half_mi\n\n                               Df      Sum of Sq             RSS    AIC\n- city_dist_mi:knn_amenity_mi   1     5756830841 258122875110505 325390\n- pct_single_family             1    18658730034 258135777009698 325391\n- story_num                     1    37488545765 258154606825428 325392\n<none>                                           258117118279664 325392\n- ln_park_dist                  1    37878814136 258154997093800 325392\n+ quarters_fe                   3    54387890031 258062730389632 325395\n+ fuel_type                     3    31075205850 258086043073814 325396\n- pct_vacant                    1   210823644869 258327941924533 325401\n- medhhinc                      1   976133373250 259093251652914 325442\n- I(age^2)                      1  1162551659566 259279669939229 325452\n- city_dist_mi:septa_half_mi    1  1238796793796 259355915073460 325456\n- age                           1  2400177602981 260517295882645 325517\n- ac_binary                     1  3141691617156 261258809896819 325556\n- basement_type                10  4983295308254 263100413587918 325635\n- bath_num                      1  6765462169116 264882580448780 325745\n- garage_num                    1  9748721063405 267865839343068 325899\n- fireplace_num                 1 10088185393881 268205303673545 325917\n- ln_square_feet                1 41841680242931 299958798522595 327454\n- neighborhood_fe             126 53699881267112 311816999546776 327737\n\nStep:  AIC=325390.1\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + knn_amenity_mi + neighborhood_fe + \n    city_dist_mi:septa_half_mi\n\n                               Df      Sum of Sq             RSS    AIC\n- knn_amenity_mi                1     9463957017 258132339067522 325389\n- pct_single_family             1    18204884533 258141079995038 325389\n- story_num                     1    36181431648 258159056542153 325390\n<none>                                           258122875110505 325390\n- ln_park_dist                  1    37697065101 258160572175606 325390\n+ city_dist_mi:knn_amenity_mi   1     5756830841 258117118279664 325392\n+ quarters_fe                   3    54325234750 258068549875755 325393\n+ fuel_type                     3    31271022938 258091604087567 325394\n- pct_vacant                    1   207829810082 258330704920587 325399\n- medhhinc                      1  1022223082224 259145098192729 325442\n- I(age^2)                      1  1163915248969 259286790359474 325450\n- city_dist_mi:septa_half_mi    1  1421034201138 259543909311643 325464\n- age                           1  2407286229613 260530161340118 325516\n- ac_binary                     1  3144162873201 261267037983706 325554\n- basement_type                10  4982909989261 263105785099766 325633\n- bath_num                      1  6759835661550 264882710772054 325743\n- garage_num                    1  9743273533387 267866148643892 325897\n- fireplace_num                 1 10082458826585 268205333937090 325915\n- ln_square_feet                1 41852960908266 299975836018771 327453\n- neighborhood_fe             126 53791205940811 311914081051316 327739\n\nStep:  AIC=325388.6\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + neighborhood_fe + city_dist_mi:septa_half_mi\n\n                              Df      Sum of Sq             RSS    AIC\n- pct_single_family            1    16233695937 258148572763459 325387\n- story_num                    1    35745374109 258168084441630 325389\n<none>                                          258132339067522 325389\n- ln_park_dist                 1    39838604645 258172177672167 325389\n+ knn_amenity_mi               1     9463957017 258122875110505 325390\n+ quarters_fe                  3    54712085454 258077626982068 325392\n+ fuel_type                    3    31263319772 258101075747749 325393\n- pct_vacant                   1   207377729293 258339716796815 325398\n- medhhinc                     1  1050183340159 259182522407681 325442\n- I(age^2)                     1  1162132948696 259294472016217 325448\n- city_dist_mi:septa_half_mi   1  1419954455139 259552293522660 325462\n- age                          1  2405621060553 260537960128075 325514\n- ac_binary                    1  3141565383491 261273904451013 325553\n- basement_type               10  4975328891408 263107667958929 325631\n- bath_num                     1  6760798186702 264893137254224 325742\n- garage_num                   1  9734395002015 267866734069537 325895\n- fireplace_num                1 10073002006327 268205341073849 325913\n- ln_square_feet               1 41865500824052 299997839891573 327452\n- neighborhood_fe            126 54107035645834 312239374713356 327752\n\nStep:  AIC=325387.5\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + city_dist_mi + septa_half_mi + ln_park_dist + \n    neighborhood_fe + city_dist_mi:septa_half_mi\n\n                              Df      Sum of Sq             RSS    AIC\n<none>                                          258148572763459 325387\n- story_num                    1    37761781537 258186334544996 325387\n- ln_park_dist                 1    41799094387 258190371857846 325388\n+ pct_single_family            1    16233695937 258132339067522 325389\n+ knn_amenity_mi               1     7492768421 258141079995038 325389\n+ quarters_fe                  3    55072283882 258093500479577 325391\n+ fuel_type                    3    30929437123 258117643326336 325392\n- pct_vacant                   1   205244039646 258353816803105 325396\n- medhhinc                     1  1103136857618 259251709621077 325444\n- I(age^2)                     1  1163894619328 259312467382787 325447\n- city_dist_mi:septa_half_mi   1  1455527337792 259604100101251 325463\n- age                          1  2405567874956 260554140638415 325513\n- ac_binary                    1  3151173792145 261299746555604 325552\n- basement_type               10  5036635022541 263185207786000 325633\n- bath_num                     1  6773444710630 264922017474089 325741\n- garage_num                   1  9848790936982 267997363700441 325900\n- fireplace_num                1 10157075517463 268305648280922 325916\n- ln_square_feet               1 42052380950189 300200953713648 327459\n- neighborhood_fe            126 54090902485293 312239475248752 327750\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute TSS\ny <- model.response(model.frame(step_model))\ntss <- sum((y - mean(y))^2)\n\n# Sequential (Type I) Sum Sq → ΔR²\nanova_model <- anova(step_model)\nanova_model <- anova_model[!is.na(anova_model$\"Sum Sq\"), , drop = FALSE]\nseq_imp <- transform(anova_model,\n                     term = rownames(anova_model),\n                     delta_R2 = `Sum Sq` / tss)\n\n# Get top 5 predictors\nseq_top4 <- seq_imp[order(-seq_imp$delta_R2), c(\"term\", \"Df\", \"delta_R2\")]\nhead(seq_top4, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                           term    Df   delta_R2\nln_square_feet   ln_square_feet     1 0.41253629\nResiduals             Residuals 13591 0.24860274\nneighborhood_fe neighborhood_fe   126 0.06520037\nmedhhinc               medhhinc     1 0.05979506\nbath_num               bath_num     1 0.04972568\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Residual map preparation\n\n# Match CRS\nphilly_neighborhoods <- st_transform(philly_neighborhoods, st_crs(final_data))\n\n# Spatial join: assign each point to a neighborhood\npoints_with_neighborhood <- st_join(final_data, philly_neighborhoods)\n\n# Add residual column\npoints_with_neighborhood$residuals <- residuals(final_model)\n\n# Calculate average residual by neighborhood\nneighborhood_residuals <- points_with_neighborhood %>%\n  st_drop_geometry() %>%\n  group_by(MAPNAME) %>%\n  summarise(\n    mean_residual = mean(residuals, na.rm = TRUE),\n    median_residual = median(residuals, na.rm = TRUE),\n    n_sales = n()\n  )\n\n# Join to neighborhoods\nneighborhoods_with_residuals <- philly_neighborhoods %>%\n  left_join(neighborhood_residuals, by = \"MAPNAME\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Map the averaged residuals\n\nneighborhood_map <- ggplot(neighborhoods_with_residuals) +\n  geom_sf(aes(fill = mean_residual), color = \"black\", size = 0.3) +\n  scale_fill_gradient2(\n    low = \"blue2\", \n    mid = \"#f5f4f0\", \n    high = \"red2\",\n    midpoint = 0,\n    labels = scales::dollar,\n    name = \"Mean Residual ($)\"\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"Average Model Residuals by Neighborhood\",\n    subtitle = \"Red = Under-Predicted | Blue = Over-Predicted\"\n  ) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank()\n  )\n\nneighborhood_map\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#ggsave(\"slide_images/residual-neighborhood.png\", plot = neighborhood_map, width = 8, height = 6, units = \"in\", dpi = 300)\n```\n:::\n\n\nUniversity City is the hardest to predict, Penn owns a lot of property that doesn’t get taxed. And some less wealthy and disinvested neighborhoods are overvalued, like Parkside and Wynnefield in West Philadelphia, but the overall model predicts pretty accurately for most neighborhoods in Philadelphia.\n\n# Cross-Validation\n\n## 10-Fold Cross-Validation\n\n### Logged Price Response Variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# first model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_log_1 <- train(ln_sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2), # Age polynomial.\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_log_1$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept      RMSE  Rsquared       MAE      RMSESD RsquaredSD       MAESD\n1      TRUE 0.3816682 0.6094278 0.2897425 0.009088709 0.01740783 0.004395093\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# second model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_log_2 <- train(ln_sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family, # census\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_log_2$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept      RMSE  Rsquared       MAE     RMSESD RsquaredSD       MAESD\n1      TRUE 0.3102648 0.7419939 0.2299054 0.01217619 0.01899135 0.005887415\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# third model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_log_3 <- train(ln_sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family +\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi, # Spatial\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_log_3$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept      RMSE  Rsquared       MAE     RMSESD RsquaredSD       MAESD\n1      TRUE 0.2952488 0.7662942 0.2176894 0.01067494 0.01599652 0.005499245\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# third model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_log_4 <- train(ln_sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family +\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi + # Spatial\n                    knn_amenity_mi * city_dist_mi + septa_half_mi * city_dist_mi + # Interaction between amenities and downtown distance.\n                    neighborhood_fe, # Fixed effect  \n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_log_4$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept      RMSE  Rsquared       MAE     RMSESD RsquaredSD       MAESD\n1      TRUE 0.2551879 0.8253801 0.1815212 0.01267003 0.01652301 0.004692818\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compare all 4 models\n\n## Combine four models：cv_model_1, cv_model_2, cv_model_3, cv_model_4\nlog_compare <- bind_rows(\n  cv_log_1$results %>% \n    mutate(Model = \"Model 1: Structural\"),\n  cv_log_2$results %>% \n    mutate(Model = \"Model 2: Structural + Census\"),\n  cv_log_3$results %>% \n    mutate(Model = \"Model 3: Structural + Census + Spatial\"),\n  cv_log_4$results %>% \n    mutate(Model = \"Model 4: Final Model\")\n) %>%\n  select(Model, RMSE, Rsquared, MAE) %>% \n  mutate(across(c(RMSE, Rsquared, MAE), round, 3))\n\n## Plot\nlog_kable <- kable(log_compare,\n                     col.names = c(\"Model\", \"RMSE\", \"R²\", \"MAE\"),\n                     caption = \"Log Model Performance Comparison (10-Fold Cross-Validation)\",\n                     digits = 4,\n                     format.args = list(big.mark = \",\")\n) %>%\n  kable_styling(latex_options = \"striped\", full_width = FALSE) %>%\n  column_spec(1, bold = TRUE, width = \"10cm\") %>%\n  row_spec(0, color = \"#f5f4f0\", background = \"#ff4100\")\n\nlog_kable\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Log Model Performance Comparison (10-Fold Cross-Validation)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Model </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> RMSE </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> R² </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> MAE </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 1: Structural </td>\n   <td style=\"text-align:right;\"> 0.382 </td>\n   <td style=\"text-align:right;\"> 0.609 </td>\n   <td style=\"text-align:right;\"> 0.290 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 2: Structural + Census </td>\n   <td style=\"text-align:right;\"> 0.310 </td>\n   <td style=\"text-align:right;\"> 0.742 </td>\n   <td style=\"text-align:right;\"> 0.230 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 3: Structural + Census + Spatial </td>\n   <td style=\"text-align:right;\"> 0.295 </td>\n   <td style=\"text-align:right;\"> 0.766 </td>\n   <td style=\"text-align:right;\"> 0.218 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 4: Final Model </td>\n   <td style=\"text-align:right;\"> 0.255 </td>\n   <td style=\"text-align:right;\"> 0.825 </td>\n   <td style=\"text-align:right;\"> 0.182 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Unlogged Price Response Variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# first model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_model_1 <- train(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2), # Age polynomial.\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_model_1$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD\n1      TRUE 174881.3 0.5946383 102296.6 25555.15 0.06642462 3870.938\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# second model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_model_2 <- train(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family, # census\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_model_2$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept     RMSE  Rsquared     MAE   RMSESD RsquaredSD    MAESD\n1      TRUE 160396.3 0.6588349 88635.4 28556.53 0.07587715 3803.434\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# third model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_model_3 <- train(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family +\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi, # Spatial\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_model_3$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD\n1      TRUE 153234.2 0.6884576 84701.65 28578.51 0.07398629 4072.517\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# third model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_model_4 <- train(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family +\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi + # Spatial\n                    knn_amenity_mi * city_dist_mi + septa_half_mi * city_dist_mi + # Interaction between amenities and downtown distance.\n                    neighborhood_fe, # Fixed effect  \n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_model_4$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD\n1      TRUE 137218.3 0.7496165 72327.67 29554.89 0.07463082 3804.496\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compare all 4 models\n\n## Combine four models：cv_model_1, cv_model_2, cv_model_3, cv_model_4\nmodel_compare <- bind_rows(\n  cv_model_1$results %>% \n    mutate(Model = \"Model 1: Structural\"),\n  cv_model_2$results %>% \n    mutate(Model = \"Model 2: Structural + Census\"),\n  cv_model_3$results %>% \n    mutate(Model = \"Model 3: Structural + Census + Spatial\"),\n  cv_model_4$results %>% \n    mutate(Model = \"Model 4: Final Model\")\n) %>%\n  select(Model, RMSE, Rsquared, MAE) %>% \n  mutate(across(c(RMSE, Rsquared, MAE), round, 3))\n\n## Plot\nmodel_kable <- kable(model_compare,\n                     col.names = c(\"Model\", \"RMSE ($)\", \"R²\", \"MAE ($)\"),\n                     caption = \"Model Performance Comparison (10-Fold Cross-Validation)\",\n                     digits = 4,\n                     format.args = list(big.mark = \",\")\n) %>%\n  kable_styling(latex_options = \"striped\", full_width = FALSE) %>%\n  column_spec(1, bold = TRUE, width = \"10cm\") %>%\n  row_spec(0, color = \"#f5f4f0\", background = \"#ff4100\")\n\nmodel_kable\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Model Performance Comparison (10-Fold Cross-Validation)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Model </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> RMSE ($) </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> R² </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> MAE ($) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 1: Structural </td>\n   <td style=\"text-align:right;\"> 174,881.3 </td>\n   <td style=\"text-align:right;\"> 0.595 </td>\n   <td style=\"text-align:right;\"> 102,296.64 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 2: Structural + Census </td>\n   <td style=\"text-align:right;\"> 160,396.3 </td>\n   <td style=\"text-align:right;\"> 0.659 </td>\n   <td style=\"text-align:right;\"> 88,635.40 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 3: Structural + Census + Spatial </td>\n   <td style=\"text-align:right;\"> 153,234.2 </td>\n   <td style=\"text-align:right;\"> 0.688 </td>\n   <td style=\"text-align:right;\"> 84,701.65 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 4: Final Model </td>\n   <td style=\"text-align:right;\"> 137,218.3 </td>\n   <td style=\"text-align:right;\"> 0.750 </td>\n   <td style=\"text-align:right;\"> 72,327.67 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create predicted vs. actual plot\n\npred_df <- cv_model_4$pred\n\n# Plot Predicted vs Actual \npred_v_act <- ggplot(pred_df, aes(x = obs, y = pred)) +\n  geom_point(alpha = 0.5, color = \"#2C7BB6\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  labs(\n    title = \"Predicted vs. Actual Sale Price\",\n    x = \"Actual Sale Price ($)\",\n    y = \"Predicted Sale Price ($)\"\n  ) +\n  scale_x_continuous(labels = scales::dollar) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 10)),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\npred_v_act\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n# Model Diagnostics\n\n## Check Assumptions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_df <- data.frame(\n  fitted = fitted(final_model),\n  residuals = resid(final_model)\n)\n\nresid_v_fit <- ggplot(resid_df, aes(x = fitted, y = residuals)) +\n  geom_point(alpha = 0.5, color = \"#2C7BB6\") +\n  geom_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(\n    title = \"Residuals vs. Fitted Values\",\n    x = \"Fitted Values (Predicted Sale Price)\",\n    y = \"Residuals\"\n  ) +\n  scale_x_continuous(labels = scales::dollar) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 10)),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\nresid_v_fit\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n**Residuals vs Fitted Values:**\n\nThe residual plot shows that most residuals are centered around zero, but the spread of residuals increases as the fitted values grow. This “funnel-shaped” pattern suggests potential heteroskedasticity, meaning the variance of errors may increase for higher-priced properties. While the overall linearity assumption appears reasonable, the increasing dispersion indicates that the model’s prediction error is not constant across the price range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_df <- data.frame(residuals = residuals(final_model))\n\n# Q-Q Plot\nqq_plot <- ggplot(resid_df, aes(sample = residuals)) +\n  stat_qq(color = \"#2C7BB6\", alpha = 0.6, size = 2) +      \n  stat_qq_line(color = \"red\", linetype = \"dashed\") +        \n  labs(\n    title = \"Normal Q-Q Plot of Residuals\",\n    subtitle = \"Check for normality assumption.\",\n    x = \"Theoretical Quantiles (Normal Distribution)\",\n    y = \"Sample Quantiles (Residuals)\"\n  ) +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 10)),\n    plot.subtitle = element_text(size = 11),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\nqq_plot\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n**Normal Q–Q Plot:**\n\nThe Q–Q plot reveals that the residuals deviate from the reference line in both tails, especially in the upper tail. This pattern indicates that the residuals are right-skewed and not perfectly normally distributed. The deviation is mainly driven by a small number of very high sale-price observations, which pull the residual distribution upward. However, moderate departures from normality are common in housing price data and generally do not invalidate the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncd <- cooks.distance(final_model)\n\nused_row_idx <- as.integer(rownames(model.frame(final_model)))\n\ncooks_df <- tibble(\n  row_in_data  = used_row_idx,           \n  row_in_model = seq_along(cd),          \n  cooks_distance = as.numeric(cd)\n)\n\nn_used <- length(cd)\nthreshold <- 4 / n_used\n\ncooks_plot <- ggplot(cooks_df, aes(x = row_in_model, y = cooks_distance)) +\n  geom_bar(stat = \"identity\", fill = \"#2C7BB6\", alpha = 0.6) +\n  geom_hline(yintercept = threshold, color = \"red\", linetype = \"dashed\") +\n  coord_cartesian(ylim = c(0, 0.02)) +  \n  labs(\n    title = \"Cook's Distance (Zoomed In)\",\n    subtitle = paste0(\"Red Dashed Line = 4/n ≈ \", round(threshold, 5)),\n    x = \"Observation Index (In-Model)\",\n    y = \"Cook's Distance\"\n  ) +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 10)),\n    plot.subtitle = element_text(size = 11),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\ncooks_plot\n```\n\n::: {.cell-output-display}\n![](Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Most influential\ntop_influential <- cooks_df %>%\n  filter(cooks_distance > threshold) %>%\n  arrange(desc(cooks_distance)) %>%\n  slice_head(n = 10) %>%\n  mutate(\n    sale_price = final_data$sale_price[row_in_data]   \n  ) %>%\n  select(row_in_model, row_in_data, sale_price, cooks_distance)\n\ntop_influential\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   row_in_model row_in_data sale_price cooks_distance\n          <int>       <int>      <dbl>          <dbl>\n 1         6038        6038    3600000         0.199 \n 2         6307        6307    5477901         0.130 \n 3          194         194    3330400         0.0463\n 4         8119        8120     480000         0.0457\n 5         2467        2467    3995000         0.0400\n 6        10355       10356     281000         0.0358\n 7         7825        7826     330000         0.0326\n 8         2590        2590    3000000         0.0284\n 9         1896        1896     170000         0.0238\n10         5371        5371    3850000         0.0235\n```\n\n\n:::\n:::\n\n\n**Cook’s Distance:**\n\nThe Cook’s distance plot shows that almost all observations have very small influence values (below the 4/n threshold), indicating that the model is not dominated by a few extreme points. A few cases exhibit slightly higher Cook’s D values, suggesting the presence of mildly influential outliers, but none appear to exert excessive leverage on the regression coefficients.\n\n# Detailed Discussion\n\nOur final model achieves a cross-validated R² of 0.825, explaining approximately 83% of the variance in Philadelphia residential sale prices. The Mean Absolute Error (MAE) of 72,327.67 USD indicates that, on average, predicted sale prices deviate from actual prices by roughly 17% of the median home price. However, the Root Mean Squared Error (RMSE) of 137,218.70USD—nearly double the MAE—reveals that the model struggles disproportionately with high-value properties. This discrepancy, combined with residuals ranging from about -800,000 USD to +5 million USD, reflects the outsized influence of luxury homes on overall error. Diagnostic plots confirm these patterns: the Q-Q plot shows deviation from normality in both tails (especially the upper tail), while the residuals vs. fitted values plot exhibits a funnel-shaped pattern indicating heteroskedasticity—prediction error variance increases systematically for higher-priced properties. Despite these issues, the median residual of 2,339 USD (near zero) suggests the model's predictions are generally unbiased for typical homes, and Cook's distance values remain well below concerning thresholds, indicating no single observation dominates the model.\n\nThe model's minimum and maximum residuals range from about -800,000 USD to +5 million USD, reflecting the outlier influence from luxury properties. While simultaneously referencing the QQ Plot, the model reflects two tails in the plot, but more in the positive region, indicating the model is not 100% normal. However, the residual distribution with the median residual of ~2,300 USD is somewhat marginal in the broader aspect, meaning the model predictions are generally centered about sale prices with limited bias in sale prediction. It is imperative to keep in mind that in the residuals vs fitted values plot, the increase of observations fanning-out as the predicted sale price value increases indicates the existence of heteroskedasticity between some variables.\n\nWe have concluded that ln_square_feet, neighborhood fixed effects, median household income, number of bathrooms and number of fireplaces as the most significant variables in our model. We calculated this by doing a stepwise regression, and these five yield the highest $R^2$.\n\nWe grossly underpredicted for University City, and a decent amount for Fairmount. This model struggles to accurately predict rural areas and overpredicted uninvested neighborhoods. The severe underprediction of University City may be due to the existence and proximity to Drexel University and the University of Pennsylvania.\n\n# External Resources\n\n### Downloads\n\n- [Property Data](https://opendataphilly.org/datasets/philadelphia-properties-and-assessment-history/)\n\n- [Neighborhood Boundaries](https://opendataphilly.org/datasets/philadelphia-neighborhoods/)\n\n- [Parks](https://rspatialdata.github.io/osm.html)\n\n- [Tracts Data](https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2020&layergroup=Census+Tracts)\n\n- [SEPTA Stations](https://opendataphilly.org/datasets/septa-routes-stops-locations/)\n\n- [ACS Data](https://walker-data.com/tidycensus/)\n\n- [Open Street Maps for Points of Interest](https://rspatialdata.github.io/osm.html)\n\n### Relevant Readings\n\n- [Homes in poor neighborhoods are taxed at roughly twice the rate of those in rich areas, study shows](https://www.washingtonpost.com/business/2021/03/12/property-tax-regressive/)\n\n- [Philadelphia ranks among top 5 cities for hottest housing market in 2025, Zillow says](https://6abc.com/post/philadelphia-ranks-among-top-5-cities-hottest-housing-market-2025-zillow-says/15777492/#:~:text=real%20estate-,Philadelphia%20ranks%20among%20top%205%20cities%20for,market%20in%202025%2C%20Zillow%20says&text=Zillow%20is%20out%20with%20its,how%20quickly%20homes%20are%20selling.)\n\n- [How Major Universities in the US Are Negatively Impacting Local Black Communities](https://www.pbs.org/wnet/chasing-the-dream/2021/04/universities-negatively-impact-black-locals-professor-baldwin/#:~:text=YOU'RE%20NOT%20JUST%20LOOKING,BRING%20TO%20THE%20PUBLIC%20GOOD?)\n\n### Artificial Intelligence\n\n- Claude: For code debugging in data cleaning and visualizations.\n\n- Chat GPT: For code debugging in data cleaning and visualizations.",
    "supporting": [
      "Cao_Deng_Luu_Rigsby_Stauffer_Vu_Appendix_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}